bin_data <- strategy_data %>%
filter(avg_IV >= bin_start & avg_IV < bin_end)
if (nrow(bin_data) > 0) {
data.frame(
strategy = strategy,
bin_center = bin_center,
binned_avg_DV = mean(bin_data$avg_DV, na.rm = TRUE)
)
} else {
NULL
}
})
do.call(rbind, binned_data)
})
binned_data <- do.call(rbind, binned_data_list)
binned_data$binned_avg_DV <- scales::rescale(binned_data$binned_avg_DV, to = c(0, 1))
if (length(unique(data$num_nodes)) > 1) {
num_nodes <- paste0(min(data$num_nodes), " - ", max(data$num_nodes))
} else {
num_nodes <- data$num_nodes[1]
}
if (lambda_value == 2) {
title_string <- "Fast Learning"
} else {
title_string <- "Slow Learning"
}
plot <- ggplot(binned_data, aes(x = bin_center, y = binned_avg_DV, color = strategy, shape = strategy, fill = strategy)) +
geom_point(size = 2) +
geom_smooth(method = "loess", span = 0.5, se = FALSE) +
labs(
title = title_string,
x = IV_label,
y = DV_label
) +
theme_minimal() +
ylim(0, 1)
if (!is.null(strategy_colors)) {
plot <- plot + scale_fill_manual(name = "Strategy", values = strategy_colors)
plot <- plot + scale_color_manual(name = "Strategy", values = strategy_colors)
} else {
plot <- plot + scale_fill_discrete(name = "Strategy")
plot <- plot + scale_color_discrete(name = "Strategy")
}
plot <- plot + scale_shape_manual(name = "Strategy", values = 21:25) # Assign different shapes
print(plot)
return(plot)
}
plotDVbyIV_binned <- function(data, DV, DV_label, IV, IV_label, lambda_value, strategy_colors = NULL) {
library(dplyr)
library(ggplot2)
average_data <- data %>%
filter(lambda == lambda_value) %>%
#mutate(!!sym(IV) := scales::rescale(!!sym(IV), to = c(0, 1))) %>%
group_by(adj_mat, strategy) %>%
summarize(avg_IV = mean(!!sym(IV), na.rm = TRUE),
avg_DV = mean(!!sym(DV), na.rm = TRUE), .groups = 'drop')
min_iv <- min(average_data$avg_IV, na.rm = TRUE)
max_iv <- max(average_data$avg_IV, na.rm = TRUE)
bin_centers1 <- seq(min_iv + 0.125, min_iv + 0.5, by = 0.125)
bin_edges1 <- data.frame(
bin_start = bin_centers1 - 0.125,
bin_end = bin_centers1 + 0.125,
bin_center = bin_centers1
)
# Create bins for the rest of the range (min + 0.5 to max_iv)
bin_centers2 <- seq(min_iv + 0.625, max_iv, by = 0.5)
bin_edges2 <- data.frame(
bin_start = bin_centers2 - 0.25,
bin_end = bin_centers2 + 0.25,
bin_center = bin_centers2
)
# Combine both bin edges
bin_edges <- rbind(bin_edges1, bin_edges2)
visible_bins <- bin_edges[bin_edges$bin_center %% 0.25 == 0, ]
binned_data_list <- lapply(unique(average_data$strategy), function(strategy) {
strategy_data <- average_data %>% filter(strategy == !!strategy)
binned_data <- lapply(1:nrow(bin_edges), function(i) {
bin_start <- bin_edges$bin_start[i]
bin_end <- bin_edges$bin_end[i]
bin_center <- bin_edges$bin_center[i]
bin_data <- strategy_data %>%
filter(avg_IV >= bin_start & avg_IV < bin_end)
if (nrow(bin_data) > 0) {
data.frame(
strategy = strategy,
bin_center = bin_center,
binned_avg_DV = mean(bin_data$avg_DV, na.rm = TRUE)
)
} else {
NULL
}
})
do.call(rbind, binned_data)
})
binned_data <- do.call(rbind, binned_data_list)
binned_data$binned_avg_DV <- scales::rescale(binned_data$binned_avg_DV, to = c(0, 1))
if (length(unique(data$num_nodes)) > 1) {
num_nodes <- paste0(min(data$num_nodes), " - ", max(data$num_nodes))
} else {
num_nodes <- data$num_nodes[1]
}
if (lambda_value == 2) {
title_string <- "Fast"
} else {
title_string <- "Slow"
}
plot <- ggplot(binned_data, aes(x = bin_center, y = binned_avg_DV, color = strategy, shape = strategy, fill = strategy)) +
geom_point(size = 2) +
geom_smooth(method = "loess", span = 0.5, se = FALSE) +
labs(
title = title_string,
x = IV_label,
y = DV_label
) +
theme_minimal() +
ylim(0, 1) +
scale_x_continuous(NULL)
if (!is.null(strategy_colors)) {
plot <- plot + scale_fill_manual(name = "Strategy", values = strategy_colors)
plot <- plot + scale_color_manual(name = "Strategy", values = strategy_colors)
} else {
plot <- plot + scale_fill_discrete(name = "Strategy")
plot <- plot + scale_color_discrete(name = "Strategy")
}
plot <- plot + scale_shape_manual(name = "Strategy", values = 21:25) # Assign different shapes
print(plot)
return(plot)
}
payoff_harsh <- plotDVbyIV_binned(
data[data$alpha == 0,],
DV = "step_payoff", DV_label = "Performance",
IV = "avg_path_length",  IV_label ="Constraints on Learning",
lambda_value = 2,
strategy_colors = c("Payoff" = "#20BF55", "Proximal" = "#FBB13C", "Prestige" = "#ED474A", "Conformity" = "#8B80F9","Random" = "black" )
)
payoff_easy <- plotDVbyIV_binned(
data[data$alpha == 0,],
DV = "step_payoff", DV_label = "Performance",
IV = "avg_path_length",  IV_label ="Constraints on Learning",
lambda_value = 10,
strategy_colors = c("Payoff" = "#20BF55", "Proximal" = "#FBB13C", "Prestige" = "#ED474A", "Conformity" = "#8B80F9","Random" = "black" )
)
plotDVbyIV_binned <- function(data, DV, DV_label, IV, IV_label, lambda_value, strategy_colors = NULL) {
library(dplyr)
library(ggplot2)
average_data <- data %>%
filter(lambda == lambda_value) %>%
#mutate(!!sym(IV) := scales::rescale(!!sym(IV), to = c(0, 1))) %>%
group_by(adj_mat, strategy) %>%
summarize(avg_IV = mean(!!sym(IV), na.rm = TRUE),
avg_DV = mean(!!sym(DV), na.rm = TRUE), .groups = 'drop')
min_iv <- min(average_data$avg_IV, na.rm = TRUE)
max_iv <- max(average_data$avg_IV, na.rm = TRUE)
bin_centers1 <- seq(min_iv + 0.125, min_iv + 0.5, by = 0.125)
bin_edges1 <- data.frame(
bin_start = bin_centers1 - 0.125,
bin_end = bin_centers1 + 0.125,
bin_center = bin_centers1
)
# Create bins for the rest of the range (min + 0.5 to max_iv)
bin_centers2 <- seq(min_iv + 0.625, max_iv, by = 0.5)
bin_edges2 <- data.frame(
bin_start = bin_centers2 - 0.25,
bin_end = bin_centers2 + 0.25,
bin_center = bin_centers2
)
# Combine both bin edges
bin_edges <- rbind(bin_edges1, bin_edges2)
visible_bins <- bin_edges[bin_edges$bin_center %% 0.25 == 0, ]
binned_data_list <- lapply(unique(average_data$strategy), function(strategy) {
strategy_data <- average_data %>% filter(strategy == !!strategy)
binned_data <- lapply(1:nrow(bin_edges), function(i) {
bin_start <- bin_edges$bin_start[i]
bin_end <- bin_edges$bin_end[i]
bin_center <- bin_edges$bin_center[i]
bin_data <- strategy_data %>%
filter(avg_IV >= bin_start & avg_IV < bin_end)
if (nrow(bin_data) > 0) {
data.frame(
strategy = strategy,
bin_center = bin_center,
binned_avg_DV = mean(bin_data$avg_DV, na.rm = TRUE)
)
} else {
NULL
}
})
do.call(rbind, binned_data)
})
binned_data <- do.call(rbind, binned_data_list)
binned_data$binned_avg_DV <- scales::rescale(binned_data$binned_avg_DV, to = c(0, 1))
if (length(unique(data$num_nodes)) > 1) {
num_nodes <- paste0(min(data$num_nodes), " - ", max(data$num_nodes))
} else {
num_nodes <- data$num_nodes[1]
}
if (lambda_value == 2) {
title_string <- "Fast"
} else {
title_string <- "Slow"
}
plot <- ggplot(binned_data, aes(x = bin_center, y = binned_avg_DV, color = strategy, shape = strategy, fill = strategy)) +
geom_point(size = 2) +
geom_smooth(method = "loess", span = 0.5, se = FALSE) +
labs(
title = title_string,
x = IV_label,
y = DV_label
) +
theme_minimal() +
ylim(0, 1) +
theme(axis.text.x = element_blank())
if (!is.null(strategy_colors)) {
plot <- plot + scale_fill_manual(name = "Strategy", values = strategy_colors)
plot <- plot + scale_color_manual(name = "Strategy", values = strategy_colors)
} else {
plot <- plot + scale_fill_discrete(name = "Strategy")
plot <- plot + scale_color_discrete(name = "Strategy")
}
plot <- plot + scale_shape_manual(name = "Strategy", values = 21:25) # Assign different shapes
print(plot)
return(plot)
}
payoff_harsh <- plotDVbyIV_binned(
data[data$alpha == 0,],
DV = "step_payoff", DV_label = "Performance",
IV = "avg_path_length",  IV_label ="Constraints on Learning",
lambda_value = 2,
strategy_colors = c("Payoff" = "#20BF55", "Proximal" = "#FBB13C", "Prestige" = "#ED474A", "Conformity" = "#8B80F9","Random" = "black" )
)
payoff_easy <- plotDVbyIV_binned(
data[data$alpha == 0,],
DV = "step_payoff", DV_label = "Performance",
IV = "avg_path_length",  IV_label ="Constraints on Learning",
lambda_value = 10,
strategy_colors = c("Payoff" = "#20BF55", "Proximal" = "#FBB13C", "Prestige" = "#ED474A", "Conformity" = "#8B80F9","Random" = "black" )
)
grid.arrange(payoff_harsh, payoff_easy)
CairoPNG("combined_plot.png", width = 500, height = 650)
install.packages("Cairo")
library(Cairo)
CairoPNG("combined_plot.png", width = 500, height = 650)
# Plot the arranged plots
grid.arrange(payoff_harsh, payoff_easy)
# Close the device
dev.off()
CairoPNG("combined_plot.png", width = 1000, height = 1300)
# Plot the arranged plots
grid.arrange(payoff_harsh, payoff_easy)
# Close the device
dev.off()
plot_graph_panel <- function(df) {
unique_adj_matrices <- df %>%
distinct(adj_mat, num_nodes)
plot_list <- list()
for (i in 1:nrow(unique_adj_matrices)) {
adj_string <- unique_adj_matrices$adj_mat[i]
num_nodes <- unique_adj_matrices$num_nodes[i]
adjacency_vector <- as.numeric(unlist(strsplit(adj_string, "")))
adjacency_matrix <- matrix(adjacency_vector, nrow = num_nodes, ncol = num_nodes, byrow = TRUE)
g <- graph_from_adjacency_matrix(adjacency_matrix, mode = "directed")
V(g)$name <- as.character(1:num_nodes)
graph_plot <- ggraph(g, layout = "tree") +
geom_edge_link(arrow = arrow(length = unit(2, 'mm'), type = "closed"), end_cap = circle(2, 'mm')) +
geom_node_point(size = 2) +
theme_void() +
theme(
plot.margin = unit(c(1,1,1,1), "pt"),
panel.border = element_rect(color = "black", fill = NA, size = 0.25)
)
plot_list[[i]] <- graph_plot
}
n_plots <- length(plot_list)
n_cols <- ceiling(sqrt(n_plots))
n_rows <- ceiling(n_plots / n_cols)
combined_plot <- plot_grid(plotlist = plot_list, ncol = n_cols, nrow = n_rows, align = 'none')
pdf_width <- n_cols * 1.5
pdf_height <- n_rows * 1.5
print(combined_plot)
combined_plot
}
unique(data$avg_path_length)
(rbind, lapply(sort(unique(data$avg_path_length))[seq(1, 43, length.out = 7)], function(val) {
sampled_rows <- do.call(rbind, lapply(sort(unique(data$avg_path_length))[seq(1, 43, length.out = 7)], function(val) {
data[data$avg_path_length == val, ][sample(sum(data$avg_path_length == val), 1), ]
}))
plot_graph_panel(sampled_rows)
plot_graph_panel <- function(df) {
unique_adj_matrices <- df %>%
distinct(adj_mat, num_nodes)
plot_list <- list()
for (i in 1:nrow(unique_adj_matrices)) {
adj_string <- unique_adj_matrices$adj_mat[i]
num_nodes <- unique_adj_matrices$num_nodes[i]
adjacency_vector <- as.numeric(unlist(strsplit(adj_string, "")))
adjacency_matrix <- matrix(adjacency_vector, nrow = num_nodes, ncol = num_nodes, byrow = TRUE)
g <- graph_from_adjacency_matrix(adjacency_matrix, mode = "directed")
V(g)$name <- as.character(1:num_nodes)
graph_plot <- ggraph(g, layout = "tree") +
geom_edge_link(arrow = arrow(length = unit(2, 'mm'), type = "closed"), end_cap = circle(2, 'mm')) +
geom_node_point(size = 2) +
theme_void() +
theme(
plot.margin = unit(c(1,1,1,1), "pt"),
panel.border = element_rect(color = "black", fill = NA, size = 0.25)
)
plot_list[[i]] <- graph_plot
}
n_plots <- length(plot_list)
n_cols <- ceiling(sqrt(n_plots))
n_rows <- ceiling(n_plots / n_cols)
n_cols <- 7
n_rows <- 1
combined_plot <- plot_grid(plotlist = plot_list, ncol = n_cols, nrow = n_rows, align = 'none')
pdf_width <- n_cols * 1.5
pdf_height <- n_rows * 1.5
print(combined_plot)
combined_plot
}
plot_graph_panel(sampled_rows)
unique(sampled_rows$avg_path_length)
round(unique(sampled_rows$avg_path_length),1)
plotDVbyIV_binned <- function(data, DV, DV_label, IV, IV_label, lambda_value, strategy_colors = NULL) {
library(dplyr)
library(ggplot2)
average_data <- data %>%
filter(lambda == lambda_value) %>%
#mutate(!!sym(IV) := scales::rescale(!!sym(IV), to = c(0, 1))) %>%
group_by(adj_mat, strategy) %>%
summarize(avg_IV = mean(!!sym(IV), na.rm = TRUE),
avg_DV = mean(!!sym(DV), na.rm = TRUE), .groups = 'drop')
min_iv <- min(average_data$avg_IV, na.rm = TRUE)
max_iv <- max(average_data$avg_IV, na.rm = TRUE)
bin_centers1 <- seq(min_iv + 0.125, min_iv + 0.5, by = 0.125)
bin_edges1 <- data.frame(
bin_start = bin_centers1 - 0.125,
bin_end = bin_centers1 + 0.125,
bin_center = bin_centers1
)
# Create bins for the rest of the range (min + 0.5 to max_iv)
bin_centers2 <- seq(min_iv + 0.625, max_iv, by = 0.5)
bin_edges2 <- data.frame(
bin_start = bin_centers2 - 0.25,
bin_end = bin_centers2 + 0.25,
bin_center = bin_centers2
)
# Combine both bin edges
bin_edges <- rbind(bin_edges1, bin_edges2)
visible_bins <- bin_edges[bin_edges$bin_center %% 0.25 == 0, ]
binned_data_list <- lapply(unique(average_data$strategy), function(strategy) {
strategy_data <- average_data %>% filter(strategy == !!strategy)
binned_data <- lapply(1:nrow(bin_edges), function(i) {
bin_start <- bin_edges$bin_start[i]
bin_end <- bin_edges$bin_end[i]
bin_center <- bin_edges$bin_center[i]
bin_data <- strategy_data %>%
filter(avg_IV >= bin_start & avg_IV < bin_end)
if (nrow(bin_data) > 0) {
data.frame(
strategy = strategy,
bin_center = bin_center,
binned_avg_DV = mean(bin_data$avg_DV, na.rm = TRUE)
)
} else {
NULL
}
})
do.call(rbind, binned_data)
})
binned_data <- do.call(rbind, binned_data_list)
binned_data$binned_avg_DV <- scales::rescale(binned_data$binned_avg_DV, to = c(0, 1))
if (length(unique(data$num_nodes)) > 1) {
num_nodes <- paste0(min(data$num_nodes), " - ", max(data$num_nodes))
} else {
num_nodes <- data$num_nodes[1]
}
if (lambda_value == 2) {
title_string <- "Fast"
} else {
title_string <- "Slow"
}
plot <- ggplot(binned_data, aes(x = bin_center, y = binned_avg_DV, color = strategy, shape = strategy, fill = strategy)) +
geom_point(size = 2) +
geom_smooth(method = "loess", span = 0.5, se = FALSE) +
labs(
title = title_string,
x = IV_label,
y = DV_label
) +
theme_minimal() +
ylim(0, 1) +
theme(
axis.text.x = element_blank(),
panel.grid = element_blank()
)
if (!is.null(strategy_colors)) {
plot <- plot + scale_fill_manual(name = "Strategy", values = strategy_colors)
plot <- plot + scale_color_manual(name = "Strategy", values = strategy_colors)
} else {
plot <- plot + scale_fill_discrete(name = "Strategy")
plot <- plot + scale_color_discrete(name = "Strategy")
}
plot <- plot + scale_shape_manual(name = "Strategy", values = 21:25) # Assign different shapes
print(plot)
return(plot)
}
payoff_harsh <- plotDVbyIV_binned(
data[data$alpha == 0,],
DV = "step_payoff", DV_label = "Performance",
IV = "avg_path_length",  IV_label ="Constraints on Learning",
lambda_value = 2,
strategy_colors = c("Payoff" = "#20BF55", "Proximal" = "#FBB13C", "Prestige" = "#ED474A", "Conformity" = "#8B80F9","Random" = "black" )
)
plotDVbyIV_binned <- function(data, DV, DV_label, IV, IV_label, lambda_value, strategy_colors = NULL) {
library(dplyr)
library(ggplot2)
average_data <- data %>%
filter(lambda == lambda_value) %>%
#mutate(!!sym(IV) := scales::rescale(!!sym(IV), to = c(0, 1))) %>%
group_by(adj_mat, strategy) %>%
summarize(avg_IV = mean(!!sym(IV), na.rm = TRUE),
avg_DV = mean(!!sym(DV), na.rm = TRUE), .groups = 'drop')
min_iv <- min(average_data$avg_IV, na.rm = TRUE)
max_iv <- max(average_data$avg_IV, na.rm = TRUE)
bin_centers1 <- seq(min_iv + 0.125, min_iv + 0.5, by = 0.125)
bin_edges1 <- data.frame(
bin_start = bin_centers1 - 0.125,
bin_end = bin_centers1 + 0.125,
bin_center = bin_centers1
)
# Create bins for the rest of the range (min + 0.5 to max_iv)
bin_centers2 <- seq(min_iv + 0.625, max_iv, by = 0.5)
bin_edges2 <- data.frame(
bin_start = bin_centers2 - 0.25,
bin_end = bin_centers2 + 0.25,
bin_center = bin_centers2
)
# Combine both bin edges
bin_edges <- rbind(bin_edges1, bin_edges2)
visible_bins <- bin_edges[bin_edges$bin_center %% 0.25 == 0, ]
binned_data_list <- lapply(unique(average_data$strategy), function(strategy) {
strategy_data <- average_data %>% filter(strategy == !!strategy)
binned_data <- lapply(1:nrow(bin_edges), function(i) {
bin_start <- bin_edges$bin_start[i]
bin_end <- bin_edges$bin_end[i]
bin_center <- bin_edges$bin_center[i]
bin_data <- strategy_data %>%
filter(avg_IV >= bin_start & avg_IV < bin_end)
if (nrow(bin_data) > 0) {
data.frame(
strategy = strategy,
bin_center = bin_center,
binned_avg_DV = mean(bin_data$avg_DV, na.rm = TRUE)
)
} else {
NULL
}
})
do.call(rbind, binned_data)
})
binned_data <- do.call(rbind, binned_data_list)
binned_data$binned_avg_DV <- scales::rescale(binned_data$binned_avg_DV, to = c(0, 1))
if (length(unique(data$num_nodes)) > 1) {
num_nodes <- paste0(min(data$num_nodes), " - ", max(data$num_nodes))
} else {
num_nodes <- data$num_nodes[1]
}
if (lambda_value == 2) {
title_string <- "Fast"
} else {
title_string <- "Slow"
}
plot <- ggplot(binned_data, aes(x = bin_center, y = binned_avg_DV, color = strategy, shape = strategy, fill = strategy)) +
geom_point(size = 2) +
geom_smooth(method = "loess", span = 0.5, se = FALSE) +
labs(
title = title_string,
x = IV_label,
y = DV_label
) +
theme_minimal() +
ylim(0, 1) +
theme(
axis.text.x = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)
if (!is.null(strategy_colors)) {
plot <- plot + scale_fill_manual(name = "Strategy", values = strategy_colors)
plot <- plot + scale_color_manual(name = "Strategy", values = strategy_colors)
} else {
plot <- plot + scale_fill_discrete(name = "Strategy")
plot <- plot + scale_color_discrete(name = "Strategy")
}
plot <- plot + scale_shape_manual(name = "Strategy", values = 21:25) # Assign different shapes
print(plot)
return(plot)
}
payoff_harsh <- plotDVbyIV_binned(
data[data$alpha == 0,],
DV = "step_payoff", DV_label = "Performance",
IV = "avg_path_length",  IV_label ="Constraints on Learning",
lambda_value = 2,
strategy_colors = c("Payoff" = "#20BF55", "Proximal" = "#FBB13C", "Prestige" = "#ED474A", "Conformity" = "#8B80F9","Random" = "black" )
)
payoff_easy <- plotDVbyIV_binned(
data[data$alpha == 0,],
DV = "step_payoff", DV_label = "Performance",
IV = "avg_path_length",  IV_label ="Constraints on Learning",
lambda_value = 10,
strategy_colors = c("Payoff" = "#20BF55", "Proximal" = "#FBB13C", "Prestige" = "#ED474A", "Conformity" = "#8B80F9","Random" = "black" )
)
