data <- average_over_replications(data)
data <- add_avg_path_length(data)
print(paste0("Finished processing data for ", num_nodes, " nodes."))
return(data)
})
all_data <- bind_rows(all_data)
return(all_data)
}
average_over_lambda <- function(data) {
outcome_vars <- c("step_payoff", "step_transitions")
other_vars_to_retain <- c("num_nodes", "avg_path_length")
lambda_values <- seq(0.1, 20, by = 0.1)
subsets <- lapply(lambda_values, function(lambda) {
data <- data %>%
mutate(weight = dpois(steps, lambda))
weighted_averages <- data %>%
group_by(adj_mat, strategy, alpha) %>%
summarize(
across(all_of(outcome_vars), ~ sum(. * weight) / sum(weight)),
across(all_of(other_vars_to_retain), first),
lambda = lambda,
.groups = 'drop'
)
return(weighted_averages)
})
result <- do.call(rbind, subsets)
return(result)
}
add_ratios <- function(data) {
data$rel_payoff <- rep(NA, nrow(data))
data$rel_success <- rep(NA, nrow(data))
for (i in 1:nrow(data)) {
if (data$strategy[[i]] == "Random") {
data$rel_payoff[[i]] <- 1
data$rel_success[[i]] <- 1
next
}
current_lambda <- data$lambda[[i]]
current_adj_mat <- data$adj_mat[[i]]
payoff <- data$step_payoff[[i]]
success <- data$step_transitions[[i]]
random_payoff <- data[data$lambda == current_lambda & data$adj_mat == current_adj_mat & data$strategy == "Random", "step_payoff"]
random_success <- data[data$lambda == current_lambda & data$adj_mat == current_adj_mat & data$strategy == "Random", "step_transitions"]
data$rel_payoff <- payoff / random_payoff
data$rel_success <- success / random_success
}
return(data)
}
#this should do the same as the one above, but faster
add_ratios <- function(data) {
data <- data %>%
group_by(lambda, adj_mat, alpha) %>%
mutate(random_payoff = ifelse(strategy == "Random", step_payoff, NA),
random_success = ifelse(strategy == "Random", step_transitions, NA)) %>%
mutate(random_payoff = max(random_payoff, na.rm = TRUE),
random_success = max(random_success, na.rm = TRUE)) %>%
mutate(rel_payoff = ifelse(strategy == "Random", 1, step_payoff / random_payoff),
rel_success = ifelse(strategy == "Random", 1, step_transitions / random_success)) %>%
ungroup() %>%
select(-random_payoff, -random_success)  # Optional: remove the helper columns if not needed
# Replace Inf and NaN from divisions by zero or NA calculations with NA
data$rel_payoff[!is.finite(data$rel_payoff)] <- NA
data$rel_success[!is.finite(data$rel_success)] <- NA
return(data)
}
plotDVbyIV <- function(data, DV, DV_label, IV, IV_label, lambda_value, strategy_colors = NULL) {
average_data <- data %>%
filter(lambda == lambda_value) %>%
mutate(
!!sym(DV) := scales::rescale(!!sym(DV), to = c(0, 1)),
!!sym(IV) := scales::rescale(!!sym(IV), to = c(0, 1))
) %>%
group_by(adj_mat, strategy, !!sym(IV)) %>%
summarize(avg_DV = mean(!!sym(DV), na.rm = TRUE), .groups = 'drop')
if (length(unique(data$num_nodes)) > 1) {
num_nodes <- paste0(min(data$num_nodes), " - ", max(data$num_nodes))
} else {
num_nodes <- data$num_nodes[1]
}
plot <- ggplot(average_data, aes_string(x = IV, y = "avg_DV", color = "strategy")) +
geom_point(alpha = 0.2) +
geom_smooth(method = "loess", se = FALSE) +
labs(
title = paste0(DV_label, " by ", IV_label),
subtitle = paste0("Number of nodes: ", num_nodes,  ", Expected number of learning opportunities Î» = ", lambda_value),
x = IV_label,
y = DV_label
) +
theme_minimal()
if (!is.null(strategy_colors)) {
plot <- plot + scale_color_manual(name = "Strategy", values = strategy_colors)
} else {
plot <- plot + scale_color_discrete(name = "Strategy")
}
print(plot)
return(plot)
}
plotDVbyTime <- function(data, DV, DV_label, IV, IV_label, lambda_value, strategy_colors = NULL) {
average_data <- data %>%
filter(lambda == lambda_value) %>%
mutate(
!!sym(DV) := scales::rescale(!!sym(DV), to = c(0, 1))
) %>%
group_by(adj_mat, strategy, !!sym(IV)) %>%
summarize(avg_DV = mean(!!sym(DV), na.rm = TRUE), .groups = 'drop')
plot <- ggplot(average_data, aes_string(x = IV, y = "avg_DV", color = "strategy")) +
geom_point(alpha = 0.2) +
geom_smooth(method = "loess", se = FALSE) +
labs(
title = paste0(DV_label, " by ", IV_label)
x = IV_label,
plotDVbyTime <- function(data, DV, DV_label, IV, IV_label, lambda_value, strategy_colors = NULL) {
average_data <- data %>%
filter(lambda == lambda_value) %>%
mutate(
!!sym(DV) := scales::rescale(!!sym(DV), to = c(0, 1))
) %>%
group_by(adj_mat, strategy, !!sym(IV)) %>%
summarize(avg_DV = mean(!!sym(DV), na.rm = TRUE), .groups = 'drop')
plot <- ggplot(average_data, aes_string(x = IV, y = "avg_DV", color = "strategy")) +
geom_point(alpha = 0.2) +
geom_smooth(method = "loess", se = FALSE) +
labs(
title = paste0(DV_label, " by ", IV_label),
x = IV_label,
y = DV_label
) +
theme_minimal()
if (!is.null(strategy_colors)) {
plot <- plot + scale_color_manual(name = "Strategy", values = strategy_colors)
} else {
plot <- plot + scale_color_discrete(name = "Strategy")
}
print(plot)
return(plot)
}
data <- readRDS("data_processed_newconf.rds")
View(data)
data <- read_all(3:8)
View(data)
data$expected_traits <- data$num_nodes * data$step_transitions
data <- average_over_lambda(data)
average_over_lambda <- function(data) {
outcome_vars <- c("step_payoff", "step_transitions")
other_vars_to_retain <- c("num_nodes", "avg_path_length", "expected_traits")
lambda_values <- seq(0.1, 20, by = 0.1)
subsets <- lapply(lambda_values, function(lambda) {
data <- data %>%
mutate(weight = dpois(steps, lambda))
weighted_averages <- data %>%
group_by(adj_mat, strategy, alpha) %>%
summarize(
across(all_of(outcome_vars), ~ sum(. * weight) / sum(weight)),
across(all_of(other_vars_to_retain), first),
lambda = lambda,
.groups = 'drop'
)
return(weighted_averages)
})
result <- do.call(rbind, subsets)
return(result)
}
data <- read_all(3:8)
data$expected_traits <- data$num_nodes * data$step_transitions
data <- average_over_lambda(data)
str(data)
data <- data %>%
arrange(strategy, adj_mat, lambda) %>%
group_by(strategy, adj_mat) %>%
mutate(cumulative_traits = cumsum(expected_traits)) %>%
ungroup()
View(data)
data <- read_all(3:8)
data$expected_traits <- data$num_nodes * data$step_transitions
data <- data %>%
arrange(strategy, adj_mat, steps) %>%
group_by(strategy, adj_mat) %>%
mutate(cumulative_traits = cumsum(expected_traits)) %>%
ungroup()
View(data)
data$expected_traits <-  data$step_transitions * data$steps
View(data)
plotDVbyTime <- function(data, DV, DV_label, IV, IV_label, strategy_colors = NULL) {
average_data <- data %>%
mutate(
!!sym(DV) := scales::rescale(!!sym(DV), to = c(0, 1))
) %>%
group_by(adj_mat, strategy, !!sym(IV)) %>%
summarize(avg_DV = mean(!!sym(DV), na.rm = TRUE), .groups = 'drop')
plot <- ggplot(average_data, aes_string(x = IV, y = "avg_DV", color = "strategy")) +
geom_point(alpha = 0.2) +
geom_smooth(method = "loess", se = FALSE) +
labs(
title = paste0(DV_label, " by ", IV_label),
x = IV_label,
y = DV_label
) +
theme_minimal()
if (!is.null(strategy_colors)) {
plot <- plot + scale_color_manual(name = "Strategy", values = strategy_colors)
} else {
plot <- plot + scale_color_discrete(name = "Strategy")
}
print(plot)
return(plot)
}
plotDVbyTime <- function(data, DV, DV_label, IV, IV_label, strategy_colors = NULL) {
average_data <- data %>%
mutate(
!!sym(DV) := scales::rescale(!!sym(DV), to = c(0, 1))
) %>%
group_by(adj_mat, strategy, !!sym(IV)) %>%
summarize(avg_DV = mean(!!sym(DV), na.rm = TRUE), .groups = 'drop')
plot <- ggplot(average_data, aes_string(x = IV, y = "avg_DV", color = "strategy")) +
geom_point(alpha = 0.2) +
geom_smooth(method = "loess", se = FALSE) +
labs(
title = paste0(DV_label, " by ", IV_label),
x = IV_label,
y = DV_label
) +
theme_minimal()
if (!is.null(strategy_colors)) {
plot <- plot + scale_color_manual(name = "Strategy", values = strategy_colors)
} else {
plot <- plot + scale_color_discrete(name = "Strategy")
}
print(plot)
return(plot)
}
success <- data %>%
filter(strategy %in% c("Payoff", "Proximal"),
avg_path_length == 0) %>%
plotDVbyTime(
DV = "expected_traits", DV_label = "Number of Traits Learned",
IV = "steps",  IV_label ="Time",
strategy_colors = c("Payoff" = "#20BF55", "Proximal" = "#FBB13C")
)
min(data$expected_traits)
plotDVbyTime <- function(data, DV, DV_label, IV, IV_label, strategy_colors = NULL) {
average_data <- data %>%
group_by(adj_mat, strategy, !!sym(IV)) %>%
summarize(avg_DV = mean(!!sym(DV), na.rm = TRUE), .groups = 'drop')
plot <- ggplot(average_data, aes_string(x = IV, y = "avg_DV", color = "strategy")) +
geom_point(alpha = 0.2) +
geom_smooth(method = "loess", se = FALSE) +
labs(
title = paste0(DV_label, " by ", IV_label),
x = IV_label,
y = DV_label
) +
theme_minimal()
if (!is.null(strategy_colors)) {
plot <- plot + scale_color_manual(name = "Strategy", values = strategy_colors)
} else {
plot <- plot + scale_color_discrete(name = "Strategy")
}
print(plot)
return(plot)
}
success <- data %>%
filter(strategy %in% c("Payoff", "Proximal"),
avg_path_length == 0) %>%
plotDVbyTime(
DV = "expected_traits", DV_label = "Number of Traits Learned",
IV = "steps",  IV_label ="Time",
strategy_colors = c("Payoff" = "#20BF55", "Proximal" = "#FBB13C")
)
str(data)
unique(data$strategy[data$avg_path_length == 0 & data$strategy %in% c("Payoff", "Proximal")])
View(data)
success <- data %>%
filter(strategy %in% c("Payoff", "Proximal"),
avg_path_length == 1) %>%
plotDVbyTime(
DV = "expected_traits", DV_label = "Number of Traits Learned",
IV = "steps",  IV_label ="Time",
strategy_colors = c("Payoff" = "#20BF55", "Proximal" = "#FBB13C")
)
success <- data %>%
filter(strategy %in% c("Payoff"),
avg_path_length == 1) %>%
plotDVbyTime(
DV = "expected_traits", DV_label = "Number of Traits Learned",
IV = "steps",  IV_label ="Time",
strategy_colors = c("Payoff" = "#20BF55", "Proximal" = "#FBB13C")
)
success <- data %>%
filter(strategy %in% c("Payoff", "Proximal"),
avg_path_length == 1.5) %>%
plotDVbyTime(
DV = "expected_traits", DV_label = "Number of Traits Learned",
IV = "steps",  IV_label ="Time",
strategy_colors = c("Payoff" = "#20BF55", "Proximal" = "#FBB13C")
)
success <- data %>%
filter(strategy %in% c("Payoff", "Proximal"),
avg_path_length == 3.5) %>%
plotDVbyTime(
DV = "expected_traits", DV_label = "Number of Traits Learned",
IV = "steps",  IV_label ="Time",
strategy_colors = c("Payoff" = "#20BF55", "Proximal" = "#FBB13C")
)
success <- data %>%
filter(strategy %in% c("Payoff", "Proximal"),
avg_path_length == 3.5,
num_nodes == 8) %>%
plotDVbyTime(
DV = "expected_traits", DV_label = "Number of Traits Learned",
IV = "steps",  IV_label ="Time",
strategy_colors = c("Payoff" = "#20BF55", "Proximal" = "#FBB13C")
)
View(data)
success <- data %>%
filter(strategy %in% c("Payoff", "Proximal"),
avg_path_length > 3,
num_nodes == 8) %>%
plotDVbyTime(
DV = "expected_traits", DV_label = "Number of Traits Learned",
IV = "steps",  IV_label ="Time",
strategy_colors = c("Payoff" = "#20BF55", "Proximal" = "#FBB13C")
)
plotDVbyTime <- function(data, DV, DV_label, IV, IV_label, strategy_colors = NULL) {
average_data <- data %>%
group_by(adj_mat, strategy, !!sym(IV)) %>%
summarize(avg_DV = mean(!!sym(DV), na.rm = TRUE), .groups = 'drop')
plot <- ggplot(average_data, aes_string(x = IV, y = "avg_DV", color = "strategy")) +
geom_point(alpha = 0.2) +
geom_smooth(method = "loess", se = FALSE) +
labs(
title = paste0(DV_label, " by ", IV_label),
x = IV_label,
y = DV_label
) +
theme_minimal() +
facet_wrap(~ structure)
if (!is.null(strategy_colors)) {
plot <- plot + scale_color_manual(name = "Strategy", values = strategy_colors)
} else {
plot <- plot + scale_color_discrete(name = "Strategy")
}
print(plot)
return(plot)
}
success <- data %>%
filter(strategy %in% c("Payoff", "Proximal"),
avg_path_length > 3,
num_nodes == 8) %>%
mutate(structure = ifelse(avg_path_length < 2, "Unconstrained",
ifelse(avg_path_length > 3, "Constrained", NA ))) %>%
filter(!is.na(structure)) %>%
plotDVbyTime(
DV = "expected_traits", DV_label = "Number of Traits Learned",
IV = "steps",  IV_label ="Time",
strategy_colors = c("Payoff" = "#20BF55", "Proximal" = "#FBB13C")
)
success <- data %>%
filter(strategy %in% c("Payoff", "Proximal"),
num_nodes == 8) %>%
mutate(structure = ifelse(avg_path_length < 2, "Unconstrained",
ifelse(avg_path_length > 3, "Constrained", NA ))) %>%
filter(!is.na(structure)) %>%
plotDVbyTime(
DV = "expected_traits", DV_label = "Number of Traits Learned",
IV = "steps",  IV_label ="Time",
strategy_colors = c("Payoff" = "#20BF55", "Proximal" = "#FBB13C")
)
success <- data %>%
filter(strategy %in% c("Payoff", "Proximal"),
num_nodes == 8) %>%
mutate(structure = ifelse(avg_path_length < 2, "Unconstrained",
ifelse(avg_path_length > 3, "Constrained", NA ))) %>%
filter(!is.na(structure)) #%>%
View(success)
plotDVbyTime(success,
DV = "expected_traits", DV_label = "Number of Traits Learned",
IV = "steps",  IV_label ="Time",
strategy_colors = c("Payoff" = "#20BF55", "Proximal" = "#FBB13C")
)
View(plotDVbyTime)
plotDVbyTime <- function(data, DV, DV_label, IV, IV_label, strategy_colors = NULL) {
average_data <- data %>%
group_by(adj_mat, strategy, !!sym(IV), structure) %>%
summarize(avg_DV = mean(!!sym(DV), na.rm = TRUE), .groups = 'drop')
plot <- ggplot(average_data, aes_string(x = IV, y = "avg_DV", color = "strategy")) +
geom_point(alpha = 0.2) +
geom_smooth(method = "loess", se = FALSE) +
labs(
title = paste0(DV_label, " by ", IV_label),
x = IV_label,
y = DV_label
) +
theme_minimal() +
facet_wrap(~ structure)
if (!is.null(strategy_colors)) {
plot <- plot + scale_color_manual(name = "Strategy", values = strategy_colors)
} else {
plot <- plot + scale_color_discrete(name = "Strategy")
}
print(plot)
return(plot)
}
success <- data %>%
filter(strategy %in% c("Payoff", "Proximal"),
num_nodes == 8) %>%
mutate(structure = ifelse(avg_path_length < 2, "Unconstrained",
ifelse(avg_path_length > 3, "Constrained", NA ))) %>%
filter(!is.na(structure)) %>%
plotDVbyTime(
DV = "expected_traits", DV_label = "Number of Traits Learned",
IV = "steps",  IV_label ="Time",
strategy_colors = c("Payoff" = "#20BF55", "Proximal" = "#FBB13C")
)
success <- data %>%
filter(strategy %in% c("Payoff", "Proximal"),
num_nodes == 8) %>%
mutate(structure = ifelse(avg_path_length < 1.5, "Unconstrained",
ifelse(avg_path_length > 3, "Constrained", NA ))) %>%
filter(!is.na(structure)) %>%
plotDVbyTime(
DV = "expected_traits", DV_label = "Number of Traits Learned",
IV = "steps",  IV_label ="Time",
strategy_colors = c("Payoff" = "#20BF55", "Proximal" = "#FBB13C")
)
success <- data %>%
filter(strategy %in% c("Payoff", "Proximal"),
num_nodes == 8) %>%
mutate(structure = ifelse(avg_path_length < 1.3, "Unconstrained",
ifelse(avg_path_length > 3, "Constrained", NA ))) %>%
filter(!is.na(structure)) %>%
mutate(structure = factor(structure, levels = c("Unconstrained", "Constrained"))) %>%
plotDVbyTime(
DV = "expected_traits", DV_label = "Number of Traits Learned",
IV = "steps",  IV_label ="Time",
strategy_colors = c("Payoff" = "#20BF55", "Proximal" = "#FBB13C")
)
success <- data %>%
filter(strategy %in% c("Payoff", "Proximal"),
num_nodes == 8) %>%
mutate(structure = ifelse(avg_path_length < 1, "Unconstrained",
ifelse(avg_path_length > 3, "Constrained", NA ))) %>%
filter(!is.na(structure)) %>%
mutate(structure = factor(structure, levels = c("Unconstrained", "Constrained"))) %>%
plotDVbyTime(
DV = "expected_traits", DV_label = "Number of Traits Learned",
IV = "steps",  IV_label ="Time",
strategy_colors = c("Payoff" = "#20BF55", "Proximal" = "#FBB13C")
)
success <- data %>%
filter(strategy %in% c("Payoff", "Proximal"),
num_nodes == 8) %>%
mutate(structure = ifelse(avg_path_length == 1, "Unconstrained",
ifelse(avg_path_length > 3, "Constrained", NA ))) %>%
filter(!is.na(structure)) %>%
mutate(structure = factor(structure, levels = c("Unconstrained", "Constrained"))) %>%
plotDVbyTime(
DV = "expected_traits", DV_label = "Number of Traits Learned",
IV = "steps",  IV_label ="Time",
strategy_colors = c("Payoff" = "#20BF55", "Proximal" = "#FBB13C")
)
success <- data %>%
filter(strategy %in% c("Payoff", "Proximal"),
num_nodes == 8) %>%
mutate(structure = ifelse(avg_path_length == 1.3, "Low Constraints",
ifelse(avg_path_length > 3, "High Constrainst", NA ))) %>%
filter(!is.na(structure)) %>%
mutate(structure = factor(structure, levels = c("Low Constraints", "High Constraints"))) %>%
plotDVbyTime(
DV = "expected_traits", DV_label = "Number of Traits Learned",
IV = "steps",  IV_label ="Time",
strategy_colors = c("Payoff" = "#20BF55", "Proximal" = "#FBB13C")
)
success <- data %>%
filter(strategy %in% c("Payoff", "Proximal"),
num_nodes == 8) %>%
mutate(structure = ifelse(avg_path_length < 1.3, "Low Constraints",
ifelse(avg_path_length > 3, "High Constrainst", NA ))) %>%
filter(!is.na(structure)) %>%
mutate(structure = factor(structure, levels = c("Low Constraints", "High Constraints"))) %>%
plotDVbyTime(
DV = "expected_traits", DV_label = "Number of Traits Learned",
IV = "steps",  IV_label ="Time",
strategy_colors = c("Payoff" = "#20BF55", "Proximal" = "#FBB13C")
)
success <- data %>%
filter(strategy %in% c("Payoff", "Proximal"),
num_nodes == 8) %>%
mutate(structure = ifelse(avg_path_length < 1.3, "Low Constraints",
ifelse(avg_path_length > 3, "High Constraints", NA ))) %>%
filter(!is.na(structure)) %>%
mutate(structure = factor(structure, levels = c("Low Constraints", "High Constraints"))) %>%
plotDVbyTime(
DV = "expected_traits", DV_label = "Number of Traits Learned",
IV = "steps",  IV_label ="Time",
strategy_colors = c("Payoff" = "#20BF55", "Proximal" = "#FBB13C")
)
success_slow <- plotDVbyIV(
data[data$alpha == 0,],
DV = "step_transitions", DV_label = "Learning Success Rate",
IV = "avg_path_length",  IV_label ="Constraints on Learning",
lambda_value = 10,
strategy_colors = c("Payoff" = "#20BF55", "Proximal" = "#FBB13C", "Prestige" = "#ED474A", "Conformity" = "#8B80F9","Random" = "black" )
)
saveRDS(data, "data_traits.rds")
data <- readRDS("data_processed_newconf.rds")
success_slow <- plotDVbyIV(
data[data$alpha == 0,],
DV = "step_transitions", DV_label = "Learning Success Rate",
IV = "avg_path_length",  IV_label ="Constraints on Learning",
lambda_value = 10,
strategy_colors = c("Payoff" = "#20BF55", "Proximal" = "#FBB13C", "Prestige" = "#ED474A", "Conformity" = "#8B80F9","Random" = "black" )
)
