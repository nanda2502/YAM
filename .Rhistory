xposs[1] <- min(data[[IV]], na.rm = TRUE)
# Last position is the max value (if there are at least 2 bins)
if (length(xposs) > 1) {
xposs[length(xposs)] <- max(data[[IV]], na.rm = TRUE)
}
# For regular bins, use the midpoint of each bin
if (length(xposs) > 2) {
for (i in 2:(length(xposs)-1)) {
xposs[i] <- (bins[i] + bins[i+1]) / 2
}
}
}
# Initialize a data frame to store aggregated results.
agg_data <- data.frame()
# Loop over each strategy.
for (i in seq_along(strategyOrder)) {
strat <- strategyOrder[i]
slope_val <- selectedSlopes[i]
# Subset the data for the current strategy and slope.
strat_data <- data %>%
filter(strategy == strat, slope == slope_val)
# Process each bin.
for (j in seq_len(length(bins) - 1)) {
bin_lower <- bins[j]
bin_upper <- bins[j + 1]
# Subset rows where the IV falls inside the current bin interval.
bin_data <- strat_data %>%
filter(.data[[IV]] > bin_lower, .data[[IV]] <= bin_upper)
if (nrow(bin_data) == 0) next
# For each unique network in the bin, choose the DV value
# from the middle observation.
networks <- unique(bin_data$adj_mat)
mid_vals <- c()
for (net in networks) {
net_data <- bin_data %>% filter(adj_mat == net)
if (nrow(net_data) == 0) next
mid_index <- ceiling(nrow(net_data) / 2)
mid_vals <- c(mid_vals, DV_trans(net_data[[DV]][mid_index]))
}
if (length(mid_vals) > 0) {
avg_val <- mean(mid_vals, na.rm = TRUE)
# Use the provided x position for this bin.
agg_data <- rbind(agg_data, data.frame(
strategy = strat,
bin = j,
x = xposs[j],
DV_val = avg_val
))
}
}
}
# For legend ordering, we want the legend to show:
# "Payoff", "Proximal", "Prestige", "Conformity", "Random"
agg_data$strategy <- factor(agg_data$strategy,
levels = c("Payoff", "Proximal", "Prestige", "Conformity", "Random"))
# Define manual mappings:
col_map <- c(
"Random" = "grey30",
"Payoff" = "blue",
"Proximal" = "red",
"Prestige" = adjustcolor("green", alpha.f = 0.5),
"Conformity" = adjustcolor("brown", alpha.f = 0.5)
)
shape_map <- c(
"Payoff" = 16,
"Proximal" = 17,
"Prestige" = 18,
"Conformity" = 19
)
lty_map <- c(
"Random" = 2,
"Payoff" = 1,
"Proximal" = 1,
"Prestige" = 1,
"Conformity" = 1
)
# Determine the yâ€“limits using the raw DV values.
y_range <- range(data[[DV]], na.rm = TRUE)
y_range_trans <- DV_trans(y_range)
# Create the ggplot.
p <- ggplot(agg_data, aes(x = x, y = DV_val,
group = strategy,
color = strategy,
shape = strategy,
linetype = strategy)) +
geom_line(size = 1) +
geom_point(size = 3) +
theme_classic() +
scale_color_manual(
values = col_map,
breaks = c("Payoff", "Proximal", "Prestige", "Conformity", "Random")
) +
scale_shape_manual(
values = shape_map,
breaks = c("Payoff", "Proximal", "Prestige", "Conformity")
) +
scale_linetype_manual(
values = lty_map,
breaks = c("Payoff", "Proximal", "Prestige", "Conformity", "Random")
) +
labs(x = IV_label, y = DV_label) +
scale_y_continuous(
breaks = seq(0, ceiling(max(y_range_trans)), by = 1),
limits = c(0, ceiling(max(y_range_trans)))
) +
theme(
# Increase the thickness of the x and y axis lines.
axis.line = element_line(color = "black", size = 1.0),
# Increase the thickness of the tick marks.
axis.ticks = element_line(color = "black", size = 1.0),
# Increase the font size and add bold for tick labels.
axis.text = element_text(color = "black", size = 12, face = "bold"),
# Increase the font size and add bold for axis titles.
axis.title = element_text(color = "black", size = 14, face = "bold"),
legend.position = "none"
)
# Return the generated bins and x-positions along with the plot for reference
attr(p, "bins") <- bins
attr(p, "xposs") <- xposs
print(p)
return(p)
}
source("D:/OneDrive/PhD/CulturalSystems/C. Models/Cpp/yam/plotting.R")
plotDVbyIVBinned(
data = data_2i,
DV = "step_payoff",
DV_label = "Performance",
IV = "mean_prereq",
IV_label = "Average number of prerequisite traits (R)",
lambda_value = 5
)
data_2i <- get_default(data) %>%
filter(mean_prereq > 4)
plotDVbyIVBinned(
data = data_2i,
DV = "step_payoff",
DV_label = "Performance",
IV = "mean_prereq",
IV_label = "Average number of prerequisite traits (R)",
lambda_value = 5
)
data50 <- read_all(50)
data_2i <- get_default(data50) %>%
filter(mean_prereq > 4)
plotDVbyIVBinned(
data = data_2i,
DV = "step_payoff",
DV_label = "Performance",
IV = "mean_prereq",
IV_label = "Average number of prerequisite traits (R)",
lambda_value = 5
)
View(data50)
constrained <- unique(data50$adj_mat)
data <- read_all(8)
####### Figure 1 #######
data_1 <- get_default(data)
plotDVbyIVBinned(
data = data_1,
DV = "step_payoff",
DV_label = "Performance",
IV = "mean_prereq",
IV_label = "Average number of prerequisite traits (R)",
lambda_value = 5,
DV_trans = identity,
bins = c(0.999, 1.001, 1.25 + 1:4/2, 3.999, 4.001) - 1,
xposs = (2:8/2) - 1
)
####### Figure 1 #######
data_1 <- get_default(data) %>%
filter(adj_mat %in% constrained)
plotDVbyIVBinned(
data = data_1,
DV = "step_payoff",
DV_label = "Performance",
IV = "mean_prereq",
IV_label = "Average number of prerequisite traits (R)",
lambda_value = 5,
DV_trans = identity,
bins = c(0.999, 1.001, 1.25 + 1:4/2, 3.999, 4.001) - 1,
xposs = (2:8/2) - 1
)
data2 <- read_all(3:7)
data <- rbind(data, data2)
####### Figure 1 #######
data_1 <- get_default(data) %>%
filter(adj_mat %in% constrained)
plotDVbyIVBinned(
data = data_1,
DV = "step_payoff",
DV_label = "Performance",
IV = "mean_prereq",
IV_label = "Average number of prerequisite traits (R)",
lambda_value = 5,
DV_trans = identity,
bins = c(0.999, 1.001, 1.25 + 1:4/2, 3.999, 4.001) - 1,
xposs = (2:8/2) - 1
)
source("D:/OneDrive/PhD/CulturalSystems/C. Models/Cpp/yam/plotting.R")
plotDVbyIVBinned(
data = data_1,
DV = "step_payoff",
DV_label = "Performance",
IV = "mean_prereq",
IV_label = "Average number of prerequisite traits (R)",
lambda_value = 5,
DV_trans = identity,
bins = c(0.999, 1.001, 1.25 + 1:4/2, 3.999, 4.001) - 1,
xposs = (2:8/2) - 1
)
source("D:/OneDrive/PhD/CulturalSystems/C. Models/Cpp/yam/plotting.R")
plotDVbyIVBinned(
data = data_1,
DV = "step_payoff",
DV_label = "Performance",
IV = "mean_prereq",
IV_label = "Average number of prerequisite traits (R)",
lambda_value = 5,
DV_trans = identity,
bins = c(0.999, 1.001, 1.25 + 1:4/2, 3.999, 4.001) - 1,
xposs = (2:8/2) - 1
)
data3 <- rbind(data,data50)
####### Figure 1 #######
data_1 <- get_default(data3) %>%
filter(adj_mat %in% constrained)
plotDVbyIVBinned(
data = data_1,
DV = "step_payoff",
DV_label = "Performance",
IV = "mean_prereq",
IV_label = "Average number of prerequisite traits (R)",
lambda_value = 5,
bin_size = 0.5
)
####### Figure 1 #######
data_1 <- get_default(data3)
plotDVbyIVBinned(
data = data_1,
DV = "step_payoff",
DV_label = "Performance",
IV = "mean_prereq",
IV_label = "Average number of prerequisite traits (R)",
lambda_value = 5,
bin_size = 0.5
)
####### Figure 1 #######
data_1 <- get_default(data3) %>%   filter(adj_mat %in% constrained)
plotDVbyIVBinned(
data = data_1,
DV = "step_payoff",
DV_label = "Performance",
IV = "mean_prereq",
IV_label = "Average number of prerequisite traits (R)",
lambda_value = 5,
bin_size = 0.5
)
plotDVbyIVBinned(
data = data_1,
DV = "absorbing",
DV_label = "Performance",
IV = "mean_prereq",
IV_label = "Average number of prerequisite traits (R)",
lambda_value = 5,
bin_size = 0.5
)
plotDVbyIVBinned <- function(data, DV, DV_label, IV, IV_label,
lambda_value = NULL,
DV_trans = identity,
bin_size = 1,
log_scale_y = FALSE,
# Optional bins and x-axis positions that will be generated dynamically
bins = NULL,
xposs = NULL) {
# Hardcoded strategy order and associated slope values.
# (Random = 0, all others = 2)
strategyOrder <- c("Random", "Payoff", "Proximal", "Prestige", "Conformity")
selectedSlopes <- c(0, 2, 2, 2, 2)
# Optionally filter by lambda_value.
if (!is.null(lambda_value)) {
data <- data %>% filter(steps == lambda_value)
}
# Dynamically generate bins if not provided
if (is.null(bins)) {
# Find min and max values of IV
min_iv <- min(data[[IV]], na.rm = TRUE)
max_iv <- max(data[[IV]], na.rm = TRUE)
# Create a small epsilon value to create narrow bins for min and max
epsilon <- min(0.001, bin_size/1000)
# Create regular bins between min and max
regular_start <- ceiling(min_iv + epsilon)
regular_end <- floor(max_iv - epsilon)
if (regular_start <= regular_end) {
# Create sequence of regular bins from start to end
regular_bins <- seq(regular_start, regular_end, by = bin_size)
# Create the complete bins vector with special min and max bins
bins <- c(
min_iv - epsilon, min_iv + epsilon,  # Min value bin
regular_bins,                        # Regular bins
max_iv - epsilon, max_iv + epsilon   # Max value bin
)
} else {
# If range is too small, just use min and max bins
bins <- c(min_iv - epsilon, min_iv + epsilon, max_iv - epsilon, max_iv + epsilon)
}
}
# Dynamically generate x-positions if not provided
if (is.null(xposs)) {
# Generate positions for each bin
xposs <- numeric(length(bins) - 1)
# First position is the min value
xposs[1] <- min(data[[IV]], na.rm = TRUE)
# Last position is the max value (if there are at least 2 bins)
if (length(xposs) > 1) {
xposs[length(xposs)] <- max(data[[IV]], na.rm = TRUE)
}
# For regular bins, use the midpoint of each bin
if (length(xposs) > 2) {
for (i in 2:(length(xposs)-1)) {
xposs[i] <- (bins[i] + bins[i+1]) / 2
}
}
}
# Initialize a data frame to store aggregated results.
agg_data <- data.frame()
# Loop over each strategy.
for (i in seq_along(strategyOrder)) {
strat <- strategyOrder[i]
slope_val <- selectedSlopes[i]
# Subset the data for the current strategy and slope.
strat_data <- data %>%
filter(strategy == strat, slope == slope_val)
# Process each bin.
for (j in seq_len(length(bins) - 1)) {
bin_lower <- bins[j]
bin_upper <- bins[j + 1]
# Subset rows where the IV falls inside the current bin interval.
bin_data <- strat_data %>%
filter(.data[[IV]] > bin_lower, .data[[IV]] <= bin_upper)
if (nrow(bin_data) == 0) next
# For each unique network in the bin, choose the DV value
# from the middle observation.
networks <- unique(bin_data$adj_mat)
mid_vals <- c()
for (net in networks) {
net_data <- bin_data %>% filter(adj_mat == net)
if (nrow(net_data) == 0) next
mid_index <- ceiling(nrow(net_data) / 2)
mid_vals <- c(mid_vals, DV_trans(net_data[[DV]][mid_index]))
}
if (length(mid_vals) > 0) {
avg_val <- mean(mid_vals, na.rm = TRUE)
# Use the provided x position for this bin.
agg_data <- rbind(agg_data, data.frame(
strategy = strat,
bin = j,
x = xposs[j],
DV_val = avg_val
))
}
}
}
# For legend ordering, we want the legend to show:
# "Payoff", "Proximal", "Prestige", "Conformity", "Random"
agg_data$strategy <- factor(agg_data$strategy,
levels = c("Payoff", "Proximal", "Prestige", "Conformity", "Random"))
# Define manual mappings:
col_map <- c(
"Random" = "grey30",
"Payoff" = "blue",
"Proximal" = "red",
"Prestige" = adjustcolor("green", alpha.f = 0.5),
"Conformity" = adjustcolor("brown", alpha.f = 0.5)
)
shape_map <- c(
"Payoff" = 16,
"Proximal" = 17,
"Prestige" = 18,
"Conformity" = 19
)
lty_map <- c(
"Random" = 2,
"Payoff" = 1,
"Proximal" = 1,
"Prestige" = 1,
"Conformity" = 1
)
# Determine the yâ€“limits using the raw DV values.
y_range <- range(data[[DV]], na.rm = TRUE)
y_range_trans <- DV_trans(y_range)
# Create the ggplot.
p <- ggplot(agg_data, aes(x = x, y = DV_val,
group = strategy,
color = strategy,
shape = strategy,
linetype = strategy)) +
geom_line(size = 1) +
geom_point(size = 3) +
theme_classic() +
scale_color_manual(
values = col_map,
breaks = c("Payoff", "Proximal", "Prestige", "Conformity", "Random")
) +
scale_shape_manual(
values = shape_map,
breaks = c("Payoff", "Proximal", "Prestige", "Conformity")
) +
scale_linetype_manual(
values = lty_map,
breaks = c("Payoff", "Proximal", "Prestige", "Conformity", "Random")
) +
labs(x = IV_label, y = DV_label) +
scale_x_continuous(
limits = c(0, max(agg_data$x) * 1.05),  # Add some padding on the right
expand = expansion(mult = c(0.05, 0.05))  # Add consistent padding on both sides
) +
theme(
# Increase the thickness of the x and y axis lines.
axis.line = element_line(color = "black", size = 1.0),
# Increase the thickness of the tick marks.
axis.ticks = element_line(color = "black", size = 1.0),
# Increase the font size and add bold for tick labels.
axis.text = element_text(color = "black", size = 12, face = "bold"),
# Increase the font size and add bold for axis titles.
axis.title = element_text(color = "black", size = 14, face = "bold"),
legend.position = "none"
)
# Apply the appropriate y-axis scale based on log_scale_y parameter
if (log_scale_y) {
# For log scale, ensure all values are positive
if (min(agg_data$DV_val, na.rm = TRUE) <= 0) {
warning("Log scale requested but data contains zero or negative values. Adding small constant to make all values positive.")
# Find the smallest positive value and use a fraction of it as offset
min_positive <- min(agg_data$DV_val[agg_data$DV_val > 0], na.rm = TRUE)
offset <- min_positive / 10
# Add offset to all values
agg_data$DV_val <- agg_data$DV_val + offset
# Update the plot data
p$data <- agg_data
}
# Apply log scale with appropriate breaks
p <- p + scale_y_log10(
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x))
)
} else {
# For regular scale, use the original settings
p <- p + scale_y_continuous(
breaks = seq(0, ceiling(max(y_range_trans)), by = 1),
limits = c(0, ceiling(max(y_range_trans)))
)
}
# Return the generated bins and x-positions along with the plot for reference
attr(p, "bins") <- bins
attr(p, "xposs") <- xposs
print(p)
return(p)
}
source("D:/OneDrive/PhD/CulturalSystems/C. Models/Cpp/yam/plotting.R")
source("D:/OneDrive/PhD/CulturalSystems/C. Models/Cpp/yam/plotting.R")
plotDVbyIVBinned(
data = data_1,
DV = "absorbing",
DV_label = "Performance",
IV = "mean_prereq",
IV_label = "Average number of prerequisite traits (R)",
lambda_value = 5,
bin_size = 0.5,
log_scale = TRUE
)
source("D:/OneDrive/PhD/CulturalSystems/C. Models/Cpp/yam/plotting.R")
plotDVbyIVBinned(
data = data_1,
DV = "absorbing",
DV_label = "Performance",
IV = "mean_prereq",
IV_label = "Average number of prerequisite traits (R)",
lambda_value = 5,
bin_size = 0.5,
log_scale = TRUE
)
plotDVbyIVBinned(
data = data_1,
DV = "absorbing",
DV_label = "Absorption time",
IV = "mean_prereq",
IV_label = "Average number of prerequisite traits (R)",
lambda_value = 5,
bin_size = 0.5,
log_scale = TRUE
)
plotDVbyIVBinned(
data = data_1,
DV = "absorbing",
DV_label = "Absorption time",
IV = "mean_prereq",
IV_label = "Average number of prerequisite traits (R)",
lambda_value = 5,
bin_size = 0.5,
log_scale = F
)
data50 <- read_all(50)
data_2i <- get_default(data50) %>%
filter(mean_prereq > 4)
plotDVbyIVBinned(
data = data_2i,
DV = "step_payoff",
DV_label = "Performance",
IV = "mean_prereq",
IV_label = "Average number of prerequisite traits (R)",
lambda_value = 5
)
