#include "Debug.hpp"

std::ostream& setPrecision(std::ostream& os, int precision) {
    os.setf(std::ios::fixed);
    os.precision(precision);
    return os;
}#include "ExpectedSteps.hpp"

#include "Debug.hpp"
#include "Learning.hpp"
#include "Graph.hpp"
#include "Payoffs.hpp"
#include "LinAlg.hpp"
#include "Utils.hpp"

#include <algorithm>
#include <iomanip>
#include <iostream>
#include <stdexcept>
#include <unordered_map>
#include <numeric>

// Function to precompute all reachable states and their learnable traits
std::vector<std::pair<Repertoire, std::vector<Trait>>> precomputeStateTransitions(const AdjacencyMatrix& adjMatrix) {
    std::vector<Repertoire> allStates = generateReachableRepertoires(adjMatrix);
    std::vector<std::pair<Repertoire, std::vector<Trait>>> stateTransitions;

    for (const auto& state : allStates) {
        std::vector<bool> learnable = learnability(state, adjMatrix);
        std::vector<Trait> learnableTraits;
        for (Trait trait = 0; trait < state.size(); ++trait) {
            if (learnable[trait]) {
                learnableTraits.push_back(trait);
            }
        }
        stateTransitions.emplace_back(std::make_pair(state, learnableTraits));
    }

    return stateTransitions;
}

// Function to adjust weights and build the transition matrix
void adjustWeightsAndBuildMatrix(
    std::vector<std::vector<double>>& transitionMatrix,
    const std::vector<std::pair<Repertoire, std::vector<Trait>>>& stateTransitions,
    const std::vector<double>& traitFrequencies,
    const PayoffVector& payoffs,
    Strategy strategy,
    const std::vector<Repertoire>& allStates
) {
    size_t numStates = stateTransitions.size();
    transitionMatrix = std::vector<std::vector<double>>(numStates, std::vector<double>(numStates, 0.0));
    std::unordered_map<Repertoire, size_t, RepertoireHash> stateToIndex;
    for (size_t i = 0; i < numStates; ++i) {
        stateToIndex[stateTransitions[i].first] = i;
    }

    for (size_t i = 0; i < numStates; ++i) {
        const Repertoire& currentState = stateTransitions[i].first;
        const std::vector<Trait>& learnableTraits = stateTransitions[i].second;
        auto w = normalizedWeights(strategy, currentState, payoffs, traitFrequencies, allStates);

        double stayProb = 1.0;
        for (const auto& trait : learnableTraits) {
            if (w[trait] > 0.0) {
                Repertoire nextState = learnTrait(currentState, trait);
                size_t j = stateToIndex[nextState];
                transitionMatrix[i][j] = w[trait];
                stayProb -= w[trait];
            }
        }
        transitionMatrix[i][i] = stayProb;

        // Validate that the row sums to 1.0
        double rowSum = std::accumulate(transitionMatrix[i].begin(), transitionMatrix[i].end(), 0.0);
        if (std::abs(rowSum - 1.0) > 1e-6) {
            std::ostringstream oss;
            oss << "Transition probabilities for state " << i << " do not sum to 1. Sum = " << rowSum;
            throw std::runtime_error(oss.str());
        }
    }
}

// Helper function to extract Q matrix and compute (I - Q)
std::vector<std::vector<double>> computeIMinusQ(
    const std::vector<std::vector<double>>& reorderedTransitionMatrix,
    int numTransientStates
) {
    // Extract the Q matrix from the reordered transition matrix
    std::vector<std::vector<double>> qMatrix(numTransientStates, std::vector<double>(numTransientStates));
    for (int i = 0; i < numTransientStates; ++i) {
        for (int j = 0; j < numTransientStates; ++j) {
            qMatrix[i][j] = reorderedTransitionMatrix[i][j];
        }
    }

    DEBUG_PRINT(2, "Q matrix:");
    if(DEBUG_LEVEL >= 2) printMatrix(qMatrix);

    // Subtract the Q matrix from the identity matrix to get I - Q
    std::vector<std::vector<double>> iMinusQ(numTransientStates, std::vector<double>(numTransientStates));
    for (int i = 0; i < numTransientStates; ++i) {
        for (int j = 0; j < numTransientStates; ++j) {
            iMinusQ[i][j] = (i == j ? 1.0 : 0.0) - qMatrix[i][j];
        }
    }

    DEBUG_PRINT(2, "I - Q matrix:");
    if(DEBUG_LEVEL >= 2) printMatrix(iMinusQ);

    return iMinusQ;
}

bool computeExpectedSteps(
    const AdjacencyMatrix& adjacencyMatrix,
    Strategy strategy,
    double alpha,
    std::mt19937& gen,
    double& expectedSteps,
    double& expectedPayoffPerStep,
    std::vector<std::vector<double>>& transitionMatrix
) {
    try {
        Trait rootNode = 0;
        std::vector<int> distances = computeDistances(adjacencyMatrix, rootNode);
        PayoffVector payoffs = generatePayoffs(distances, alpha, gen);

        size_t n = adjacencyMatrix.size();
        std::vector<double> traitFrequencies(n, 1.0 / static_cast<double>(n));

        const std::vector<std::pair<Repertoire, std::vector<Trait>>> stateTransitions = precomputeStateTransitions(adjacencyMatrix);

        // Extract allStates from stateTransitions
        std::vector<Repertoire> allStates;
        allStates.reserve(stateTransitions.size());
        for (const auto& pair : stateTransitions) {
            allStates.push_back(pair.first);
        }

        const int MAX_ITERATIONS = 1000;  // Increased max iterations for convergence
        const double EPSILON = 1e-6;      // Tighter convergence criterion
        int iteration = 0;
        double maxDifference;

        DEBUG_PRINT(1, "Starting iterative fixed-point method for trait frequencies");

        do {
            DEBUG_PRINT(1, "Iteration " << iteration + 1);

            std::vector<double> prevFrequencies = traitFrequencies;

            // Adjust weights and rebuild transition matrix
            adjustWeightsAndBuildMatrix(transitionMatrix, stateTransitions, traitFrequencies, payoffs, strategy, allStates);

            // Identify transient and absorbing states
            std::vector<bool> isAbsorbing(transitionMatrix.size(), true);
            for (size_t i = 0; i < transitionMatrix.size(); ++i) {
                if (transitionMatrix[i][i] < 1.0 - 1e-6) {  // Use a small epsilon for comparison
                    isAbsorbing[i] = false;
                }
            }

            size_t numTransientStates = std::count(isAbsorbing.begin(), isAbsorbing.end(), false);

            if (numTransientStates == 0) {
                expectedSteps = 0.0;
                expectedPayoffPerStep = std::accumulate(payoffs.begin(), payoffs.end(), 0.0);
                return true;
            }

            // Reorder matrix to put transient states first
            std::vector<size_t> stateMapping;
            for (size_t i = 0; i < isAbsorbing.size(); ++i) {
                if (!isAbsorbing[i]) {
                    stateMapping.push_back(i);
                }
            }
            for (size_t i = 0; i < isAbsorbing.size(); ++i) {
                if (isAbsorbing[i]) {
                    stateMapping.push_back(i);
                }
            }

            std::vector<std::vector<double>> reorderedTransitionMatrix;
            reorderedTransitionMatrix.reserve(stateMapping.size());
            for (size_t i : stateMapping) {
                std::vector<double> row;
                row.reserve(stateMapping.size());
                for (size_t j : stateMapping) {
                    row.push_back(transitionMatrix[i][j]);
                }
                reorderedTransitionMatrix.push_back(std::move(row));
            }

            std::vector<std::vector<double>> iMinusQ = computeIMinusQ(reorderedTransitionMatrix, static_cast<int>(numTransientStates));

            // Compute fundamental matrix
            std::vector<std::vector<double>> fundamentalMatrix(numTransientStates, std::vector<double>(numTransientStates));
            for (size_t i = 0; i < numTransientStates; ++i) {
                std::vector<double> e_i(numTransientStates, 0.0);
                e_i[i] = 1.0;
                std::vector<double> column = solveLinearSystem(iMinusQ, e_i);
                for (size_t j = 0; j < numTransientStates; ++j) {
                    fundamentalMatrix[j][i] = column[j];
                }
            }

            // Compute new trait frequencies
            double totalTransientTime = 0.0;
            for (const auto& row : fundamentalMatrix) {
                totalTransientTime += std::accumulate(row.begin(), row.end(), 0.0);
            }

            for (size_t j = 1; j < n; ++j) {
                double timeTraitKnown = 0.0;
                for (size_t r = 0; r < numTransientStates; ++r) {
                    if (allStates[stateMapping[r]][j]) {
                        timeTraitKnown += fundamentalMatrix[0][r];
                    }
                }
                traitFrequencies[j] = timeTraitKnown / totalTransientTime;
            }

            // Normalize trait frequencies (excluding the root node)
            double sum = std::accumulate(traitFrequencies.begin() + 1, traitFrequencies.end(), 0.0);
            for (size_t j = 1; j < n; ++j) {
                traitFrequencies[j] /= sum;
            }
            traitFrequencies[0] = 0.0;  // Root node frequency is not relevant

            maxDifference = 0.0;
            for (size_t j = 1; j < n; ++j) {
                maxDifference = std::max(maxDifference, std::abs(traitFrequencies[j] - prevFrequencies[j]));
            }

            DEBUG_PRINT(1, "Current trait frequencies:");
            if (DEBUG_LEVEL >= 1) {
                for (size_t j = 0; j < n; ++j) {
                    std::cout << "Trait " << j << ": " << traitFrequencies[j] << '\n';
                }
            }
            DEBUG_PRINT(1, "Max difference: " << maxDifference << std::setprecision(4));

            ++iteration;
        } while (maxDifference > EPSILON && iteration < MAX_ITERATIONS);

        if (iteration == MAX_ITERATIONS) {
            DEBUG_PRINT(1, "Warning: Maximum iterations reached without convergence");
        } else {
            DEBUG_PRINT(1, "Converged after " << iteration << " iterations");
        }

        // Compute the final expected steps and payoff per step

        // Rebuild the transition matrix one last time using the converged frequencies
        adjustWeightsAndBuildMatrix(transitionMatrix, stateTransitions, traitFrequencies, payoffs, strategy, allStates);

        // Identify transient and absorbing states
        std::vector<bool> isAbsorbing(transitionMatrix.size(), false);
        for (size_t i = 0; i < transitionMatrix.size(); ++i) {
            if (isAbsorbingState(allStates[i])) {
                isAbsorbing[i] = true;
            }
        }

        size_t numTransientStates = std::count(isAbsorbing.begin(), isAbsorbing.end(), false);

        if (numTransientStates == 0) {
            expectedSteps = 0.0;
            expectedPayoffPerStep = std::accumulate(payoffs.begin(), payoffs.end(), 0.0);
            return true;
        }

        // Reorder matrix to put transient states first
        std::vector<size_t> stateMapping;
        for (size_t i = 0; i < isAbsorbing.size(); ++i) {
            if (!isAbsorbing[i]) {
                stateMapping.push_back(i);
            }
        }
        for (size_t i = 0; i < isAbsorbing.size(); ++i) {
            if (isAbsorbing[i]) {
                stateMapping.push_back(i);
            }
        }

        std::vector<std::vector<double>> reorderedTransitionMatrix;
        reorderedTransitionMatrix.reserve(stateMapping.size());
        for (size_t i : stateMapping) {
            std::vector<double> row;
            row.reserve(stateMapping.size());
            for (size_t j : stateMapping) {
                row.push_back(transitionMatrix[i][j]);
            }
            reorderedTransitionMatrix.push_back(std::move(row));
        }

        std::vector<std::vector<double>> iMinusQ = computeIMinusQ(reorderedTransitionMatrix, static_cast<int>(numTransientStates));

        // Compute expected steps
        std::vector<double> ones(numTransientStates, 1.0);
        std::vector<double> expectedStepsVector = solveLinearSystem(iMinusQ, ones);
        expectedSteps = expectedStepsVector[0];  // Initial state is always the first transient state

        // Compute expected payoff per step
        std::vector<double> statePayoffs(allStates.size(), 0.0);
        for (size_t i = 0; i < allStates.size(); ++i) {
            for (size_t j = 0; j < n; ++j) {
                if (allStates[i][j]) {
                    statePayoffs[i] += payoffs[j];
                }
            }
        }

        // Map state payoffs to reordered indices
        std::vector<double> transientStatePayoffs(numTransientStates);
        for (size_t i = 0; i < numTransientStates; ++i) {
            transientStatePayoffs[i] = statePayoffs[stateMapping[i]];
        }

        std::vector<double> expectedPayoffs = solveLinearSystem(iMinusQ, transientStatePayoffs);
        double totalExpectedPayoff = expectedPayoffs[0];  // Initial state is always the first transient state
        expectedPayoffPerStep = totalExpectedPayoff / expectedSteps;

        return true;

    } catch (const std::exception& e) {
        // On encountering an exception, return false
        DEBUG_PRINT(0, "Exception in computeExpectedSteps: " << e.what());
        return false;
    }
}#include "Graph.hpp"

#include <cstddef>
#include <stdexcept>
#include <queue>

std::vector<int> computeDistances(const AdjacencyMatrix& adjMatrix, Trait root) {
    size_t n = adjMatrix.size();
    std::vector<int> distances(n, -1);
    std::queue<Trait> q;

    distances[root] = 0;
    q.push(root);

    while (!q.empty()) {
        Trait current = q.front();
        q.pop();

        for (size_t neighbor = 0; neighbor < n; ++neighbor) {
            if (adjMatrix[current][neighbor] && distances[neighbor] == -1) {
                distances[neighbor] = distances[current] + 1;
                q.push(neighbor);
            }
        }
    }

    for (size_t node = 0; node < n; ++node) {
        if (distances[node] == -1) {
            throw std::runtime_error("Graph is not connected");
        }
    }
    return distances;
}

std::vector<Trait> parentTraits(const AdjacencyMatrix& adjMatrix, Trait trait) {
    std::vector<Trait> parents;
    size_t n = adjMatrix.size();

    for (size_t i = 0; i < n; ++i) {
        if (adjMatrix[i][trait]) {
            parents.push_back(i);
        }
    }
    return parents;
}

#include "Learning.hpp"

#include "Graph.hpp"
#include <numeric>
#include <stdexcept>
#include <algorithm>
#include <queue>
#include <unordered_set>
#include <cmath>


std::vector<bool> learnability(const Repertoire& repertoire, const AdjacencyMatrix& adjMatrix) {
    std::vector<bool> learnable(repertoire.size());

    for (size_t trait = 0; trait < repertoire.size(); ++trait) {
        auto parents = parentTraits(adjMatrix, trait);

        // true if all parents are in the repertoire
        bool parent_product = std::accumulate(parents.begin(), parents.end(), true,
            [&repertoire](bool acc, Trait parent) {
                return acc && repertoire[parent];
            });

        // true if the trait is not in the repertoire and all parents are in the repertoire
        bool is_learnable = !repertoire[trait] && parent_product;

        learnable[trait] = is_learnable;
    }
    return learnable;
}

double computeDelta(const Repertoire& r, const Repertoire& s) { // count the number of traits that are present in target state s but not in current state r
    return std::inner_product(s.begin(), s.end(), r.begin(), 0.0,
        std::plus<>(), [](bool s_i, bool r_i) { return (s_i && !r_i) ? 1 : 0; });
}

double phi(double delta) {
    return std::pow(2.0, 1.0 - delta);
}

std::vector<double> vygotskianBaseWeights(const Repertoire& repertoire, const std::vector<double>& traitFrequencies, const std::vector<Repertoire>& allStates) {
    std::vector<double> w_star(repertoire.size(), 0.0);
    std::vector<double> stateWeights(allStates.size(), 0.0);

    // Compute state weights
    for (size_t i = 0; i < allStates.size(); ++i) {
        double delta = computeDelta(repertoire, allStates[i]);
        if (delta > 0) {  // Only consider states with at least one more trait
            stateWeights[i] = traitFrequencies[i] * phi(delta);
        }
    }

    // Compute trait contributions
    for (size_t j = 0; j < repertoire.size(); ++j) {
        if (!repertoire[j]) {  // Only consider unlearned traits
            for (size_t i = 0; i < allStates.size(); ++i) {
                if (allStates[i][j] && computeDelta(repertoire, allStates[i]) > 0) {
                    int N_s = computeDelta(repertoire, allStates[i]);  // Number of additional traits known in s but not in r
                    w_star[j] += stateWeights[i] / N_s;
                }
            }
        }
    }

    return w_star;
}

std::vector<double> baseWeights(Strategy strategy, const Repertoire& repertoire, const PayoffVector& payoffs, const std::vector<double>& traitFrequencies, const std::vector<Repertoire>& allStates) {
    switch (strategy) {
    case RandomLearning:
        return traitFrequencies;
    case PayoffBasedLearning:
        {
            std::vector<double> result(payoffs.size());
            std::transform(payoffs.begin(), payoffs.end(), traitFrequencies.begin(), result.begin(), std::multiplies<>());
            return result;
        }
    case VygotskianLearning:
        return vygotskianBaseWeights(repertoire, traitFrequencies, allStates);
    default:
        throw std::runtime_error("Unknown strategy");
    }
}

std::vector<double> normalizedWeights(Strategy strategy, const Repertoire& repertoire, const PayoffVector& payoffs, const std::vector<double>& traitFrequencies, const std::vector<Repertoire>& allStates) {
    std::vector<double> w_star = baseWeights(strategy, repertoire, payoffs, traitFrequencies, allStates);

    std::vector<double> w_unlearned(repertoire.size());
    for (Trait trait = 0; trait < repertoire.size(); ++trait) {
        w_unlearned[trait] = repertoire[trait] ? 0.0 : w_star[trait]; //weight is 0 if trait is already learned
    }

    double total = std::accumulate(w_unlearned.begin(), w_unlearned.end(), 0.0);

    if (total == 0.0) {
        return std::vector<double>(repertoire.size(), 0.0);
    }

    std::transform(w_unlearned.begin(), w_unlearned.end(), w_unlearned.begin(),
        [total](double w) { return w / total; });

    return w_unlearned;
}

Repertoire learnTrait(const Repertoire& repertoire, Trait trait) {
    Repertoire newRepertoire = repertoire;
    newRepertoire[trait] = true;
    return newRepertoire;
}

std::vector<std::pair<Repertoire, double>> transitionFromState(Strategy strategy, const Repertoire& repertoire, const AdjacencyMatrix& adjMatrix, const PayoffVector& payoffs, const std::vector<double>& traitFrequencies, const std::vector<Repertoire>& allStates) {
    std::vector<double> w = normalizedWeights(strategy, repertoire, payoffs, traitFrequencies, allStates);
    std::vector<bool> learnable = learnability(repertoire, adjMatrix);

    std::vector<std::pair<Repertoire, double>> transitions;

    for(Trait trait = 0; trait < repertoire.size(); ++trait) {
        if (learnable[trait] && w[trait] > 0.0) {
            transitions.emplace_back(learnTrait(repertoire, trait), w[trait]);
        }
    }

    return transitions;
}

double stayProbability(Strategy strategy, const Repertoire& repertoire, const AdjacencyMatrix& adjMatrix, const PayoffVector& payoffs, const std::vector<double>& traitFrequencies, const std::vector<Repertoire>& allStates) {
    auto transitions = transitionFromState(strategy, repertoire, adjMatrix, payoffs, traitFrequencies, allStates);

    double totalTransitionProbability = std::accumulate(
        transitions.begin(), transitions.end(), 0.0,
        [](double sum, const auto& transition) { 
            return sum + transition.second;
        }
    );

    return 1.0 - totalTransitionProbability;
}

std::vector<Repertoire> generateReachableRepertoires(const AdjacencyMatrix& adjMatrix) {
    size_t n = adjMatrix.size();
    Repertoire initialRepertoire(n, false);
    initialRepertoire[0] = true; // root trait is always learned

    std::queue<Repertoire> queue;
    std::unordered_set<Repertoire, RepertoireHash> visited;
    std::vector<Repertoire> result;

    queue.push(initialRepertoire);

    while (!queue.empty()) {
        Repertoire r = queue.front();
        queue.pop();

        if (visited.find(r) == visited.end()) {
            visited.insert(r);
            result.push_back(r);

            std::vector<bool> learnable = learnability(r, adjMatrix);
            for (Trait trait = 0; trait < n; ++trait) {
                if (learnable[trait]) {
                    Repertoire r_new = learnTrait(r, trait);
                    if (visited.find(r_new) == visited.end()) {
                        queue.push(r_new);
                    }
                }
            }
        }
    }

    return result;
}#include "LinAlg.hpp"
#include <cmath>
#include <algorithm>
#include <stdexcept>

const double EPSILON = 1e-10;

std::vector<double> solveLinearSystem(const std::vector<std::vector<double>>& a, const std::vector<double>& b) {
    int n = a.size();
    std::vector<std::vector<double>> LU = a;
    std::vector<int> P(n);
    for (int i = 0; i < n; i++) P[i] = i;

    // Perform LU decomposition with partial pivoting
    for (int k = 0; k < n - 1; k++) {
        // Find the pivot row
        int pivot_row = k;
        double pivot_val = std::abs(LU[k][k]);
        for (int i = k + 1; i < n; i++) {
            if (std::abs(LU[i][k]) > pivot_val) {
                pivot_row = i;
                pivot_val = std::abs(LU[i][k]);
            }
        }

        // If the pivot value is too small, the matrix is singular or nearly singular
        if (pivot_val < EPSILON) {
            throw std::runtime_error("Matrix is singular or nearly singular");
        }

        // Swap the current row with the pivot row
        if (pivot_row != k) {
            std::swap(LU[k], LU[pivot_row]);
            std::swap(P[k], P[pivot_row]);
        }

        // Perform the elimination process to form the LU decomposition
        for (int i = k + 1; i < n; i++) {
            LU[i][k] /= LU[k][k];
            for (int j = k + 1; j < n; j++) {
                LU[i][j] -= LU[i][k] * LU[k][j];
            }
        }
    }

    // Forward substitution to solve Ly = Pb
    std::vector<double> y(n);
    for (int i = 0; i < n; i++) {
        y[i] = b[P[i]];
        for (int j = 0; j < i; j++) {
            y[i] -= LU[i][j] * y[j];
        }
    }

    // Backward substitution to solve Ux = y
    std::vector<double> x(n);
    for (int i = n - 1; i >= 0; i--) {
        x[i] = y[i];
        for (int j = i + 1; j < n; j++) {
            x[i] -= LU[i][j] * x[j];
        }
        x[i] /= LU[i][i];
    }

    return x;
}#include <iostream>
#include <algorithm>
#include <execution>
#include <vector>
#include <string>
#include <sstream>
#include <filesystem>
#include <random>
#include <iomanip>

#include "Debug.hpp"
#include "Utils.hpp"
#include "Types.hpp"
#include "ExpectedSteps.hpp"

void processRepl(
    int repl,
    const AdjacencyMatrix& adjMatrix,
    const Strategy& strategy,
    double alpha,
    int n,
    bool saveTransitionMatrices,
    const std::string &outputDir,
    std::vector<Result>& flatResults,
    size_t idx,
    std::vector<std::atomic<int>>& failureCounts  // Add failureCounts vector
) {
    DEBUG_PRINT(1, "Replication:");
    if (DEBUG_LEVEL >= 1) std::cout << repl << '\n';

    std::random_device rd;
    std::mt19937 gen(rd());

    // Compute expected steps
    double expectedSteps = 0.0;
    double expectedPayoffPerStep = 0.0;
    std::vector<std::vector<double>> transitionMatrix;

    if (!computeExpectedSteps(adjMatrix, strategy, alpha, gen, expectedSteps, expectedPayoffPerStep, transitionMatrix)) {
        // Increment failure count
        ++failureCounts[idx];
        return;
    }

    // Save transition matrix if flag is set
    if (saveTransitionMatrices) {
        std::ostringstream alphaStrStream;
        alphaStrStream << std::fixed << std::setprecision(2) << alpha;
        std::string alphaStr = alphaStrStream.str();

        std::string strategyStr = strategyToString(strategy);
        std::string fileName = "transition_mat_" + adjMatrixToBinaryString(adjMatrix) + "_strategy_" + strategyStr + "_alpha_" + alphaStr + ".csv";
        std::string filePath = outputDir + "/" + fileName;
        writeMatrixToCSV(filePath, transitionMatrix);
    }

    // Store results directly into the pre-allocated vector
    flatResults[idx] = Result{n, adjMatrixToBinaryString(adjMatrix), alpha, strategy, repl, expectedSteps, expectedPayoffPerStep};
}

int main(int argc, char* argv[]) {
    // Parse command line arguments
    bool saveTransitionMatrices = false;
    int numNodes = parseArgs(argc, argv, saveTransitionMatrices);
    int n = numNodes;
    int replications = 10;
    try {
        // Define alphas and strategies
        std::vector<double> alphas = {1.0};
        std::vector<Strategy> strategies = {Strategy::RandomLearning, Strategy::PayoffBasedLearning, Strategy::VygotskianLearning};
    
        // Prepare output directory
        std::string outputDir = "../output";
        if (!std::filesystem::exists(outputDir)) {
            std::filesystem::create_directory(outputDir);
        }
    
        // Read adjacency matrices
        std::vector<AdjacencyMatrix> adjacencyMatrices = readAdjacencyMatrices(n);
    
        std::cout << "Starting " << alphas.size() * strategies.size() * adjacencyMatrices.size() * 10 << " runs." << '\n';
    
        // Prepare the combinations
        std::vector<ParamCombination> combinations = makeCombinations(adjacencyMatrices, strategies, alphas, replications);
    
        std::vector<Result> flatResults(combinations.size());
        // Preallocate failure counts vector
        std::vector<std::atomic<int>> failureCounts(combinations.size());
    
        // Create indices for storing the results
        std::vector<size_t> indices(combinations.size());
        std::iota(indices.begin(), indices.end(), 0);
    
        // Process all combinations in parallel
        std::for_each(std::execution::par, indices.begin(), indices.end(), [&](size_t idx) {
            const ParamCombination& comb = combinations[idx];
            DEBUG_PRINT(1, "Adjacency Matrix:");
            if(DEBUG_LEVEL >= 1) std::cout << comb.adjMatrixBinary << '\n';
            DEBUG_PRINT(1, "Strategy:");
            if(DEBUG_LEVEL >= 1) std::cout << strategyToString(comb.strategy) << '\n';
            DEBUG_PRINT(1, "Alpha:");
            if(DEBUG_LEVEL >= 1) std::cout << comb.alpha << '\n';
    
            processRepl(
                comb.repl,
                comb.adjMatrix,
                comb.strategy,
                comb.alpha,
                n,
                saveTransitionMatrices,
                outputDir,
                flatResults,
                idx,
                failureCounts  
            );
        });
    
        // Compute total failures
        int totalFailures = 0;
        for (const auto& count : failureCounts) {
            totalFailures += count.load();
        }
    
        // Print total number of failures with debug level 0
        DEBUG_PRINT(0, "Total failures: " << totalFailures);
    
        // Prepare CSV data with header
        std::string csvHeader = "num_nodes,adj_mat,alpha,strategy,repl,steps,step_payoff";
        std::vector<std::string> csvData;
        csvData.push_back(csvHeader);
    
        for (const auto& result : flatResults) {
            std::string formattedResult = formatResults(
                result.n,
                result.adjMatrixBinary,
                result.alpha,
                result.strategy,
                result.repl,
                result.expectedSteps,
                result.expectedPayoffPerStep
            );
            csvData.push_back(formattedResult);
        }
    
        writeAndCompressCSV(outputDir, n, csvData);
       
    } catch (const std::exception& ex) {
        std::cerr << "Error: " << ex.what() << '\n';
        return 1;
    }
    
    return 0;
}#include "Payoffs.hpp"
#include <random>


PayoffVector generatePayoffs(const std::vector<int>& distances, double alpha, std::mt19937& gen) {
    std::uniform_real_distribution<double> dist(0.0, 1.0);

    PayoffVector payoffs(distances.size());

    for (size_t i = 0; i < distances.size(); ++i) {
        if (distances[i] == 0) {
            payoffs[i] = 0.0;
        } else {
            double randValue = dist(gen);
            double payoff = randValue + alpha * distances[i];
            payoffs[i] = payoff;
        }
    }

    return payoffs;
}#include "Utils.hpp"
#include "Types.hpp"
#include <fstream>
#include <iomanip>
#include <stdexcept>
#include <iostream>
#include <cstdio>
#include <zlib.h>

void writeMatrixToCSV(const std::string& filename, const std::vector<std::vector<double>>& matrix) {
    std::ofstream file(filename);
    if (!file.is_open()) {
        throw std::runtime_error("Could not open file " + filename);
    }

    for (const auto& row : matrix) {
        for (size_t i = 0; i < row.size(); ++i) {
            file << std::fixed << std::setprecision(2) << row[i];
            if (i < row.size() - 1) file << ',';
        }
        file << '\n';
    }
}

std::string strategyToString(Strategy strategy) {
    switch (strategy) {
        case RandomLearning:
            return "RandomLearning";
        case PayoffBasedLearning:
            return "PayoffBasedLearning";

        case VygotskianLearning:
            return "VygotskianLearning";
        default:
            throw std::invalid_argument("Unknown strategy");
    }
}

std::string formatResults(int n, const std::string& adjMatrixBinary, double alpha, Strategy strategy, int repl, double expectedSteps, double expectedPayoffPerStep) {
    std::ostringstream oss;
    oss << n << ',' << adjMatrixBinary << ',' << alpha << ',' << strategyToString(strategy) << ',' << repl << ',' << std::fixed << std::setprecision(4) << expectedSteps << ',' << expectedPayoffPerStep;
    return oss.str();
}

std::vector<AdjacencyMatrix> readAdjacencyMatrices(int n) {
    std::string filePath = "../data/data_new/adj_mat_" + std::to_string(n) + ".csv";
    std::ifstream file(filePath);
    if (!file.is_open()) throw std::runtime_error("Could not open file " + filePath);

    std::vector<AdjacencyMatrix> matrices;
    std::string line;
    while (std::getline(file, line)) {
        matrices.push_back(binaryStringToAdjacencyMatrix(n, line));
    }
    
    std::cout << "Loaded " << matrices.size() << " adjacency matrices." << '\n';

    return matrices;
}

AdjacencyMatrix binaryStringToAdjacencyMatrix(int n, const std::string& str) {
    std::string binaryStr = str;

    if (binaryStr.length() != static_cast<size_t>(n * n)) {
        throw std::invalid_argument("Invalid length: Expected " + std::to_string(n * n) + 
                                    " bits, got " + std::to_string(binaryStr.length()));
    }

    AdjacencyMatrix matrix(n, std::vector<bool>(n));
    for (int row = 0; row < n; ++row) {
        for (int column = 0; column < n; ++column) {
            matrix[row][column] = charToBool(binaryStr[row * n + column]);
        }
    }

    return matrix;
}

bool charToBool(char c) {
    if (c == '0') return false;
    if (c == '1') return true;
    throw std::invalid_argument("Invalid character in adjacency matrix: Expected '0' or '1', got " + std::string(1, c));
}


void printMatrix(const std::vector<std::vector<double>>& matrix) {
    for (const auto& row : matrix) {
        for (const auto& element : row) {
            std::cout << std::setw(10) << std::fixed << std::setprecision(3) << element << " ";
        }
        std::cout << '\n';
    }
}

int parseArgs(int argc, char* argv[], bool& saveTransitionMatrices) {
    int numNodes = 4;  // Default value
    saveTransitionMatrices = false;  // Default value

    if (argc == 1) {
        // Use default values
    } else if (argc == 2) {
        numNodes = std::stoi(argv[1]);
    } else if (argc == 3) {
        numNodes = std::stoi(argv[1]);
        std::string arg2 = argv[2];
        if (arg2 == "True") {
            saveTransitionMatrices = true;
        } else if (arg2 == "False") {
            saveTransitionMatrices = false;
        } else {
            throw std::invalid_argument("Second argument must be True or False.");
        }
    } else {
        throw std::invalid_argument("Usage: program [numNodes] [saveTransitionMatrices]");
    }

    return numNodes;
}

void writeAndCompressCSV(const std::string& outputDir, int n, const std::vector<std::string>& csvData) {
    // Construct the output CSV file path
    std::string outputCsvPath = outputDir + "/expected_steps_" + std::to_string(n) + ".csv";

    // Write results to CSV
    std::ofstream csvFile(outputCsvPath);
    if (!csvFile.is_open()) {
        std::cerr << "Failed to open file for writing: " << outputCsvPath << '\n';
        return;
    }
    for (const auto& line : csvData) {
        csvFile << line << "\n";
    }
    csvFile.close();

    // Compress the CSV file using gzip
    std::string compressedFilePath = outputCsvPath + ".gz";
    FILE* source = fopen(outputCsvPath.c_str(), "rb");
    gzFile dest = gzopen(compressedFilePath.c_str(), "wb");
    if ((source == nullptr) || (dest == nullptr)) {
        std::cerr << "Failed to open files for compression\n";
        if (source != nullptr) fclose(source);
        if (dest != nullptr) gzclose(dest);
        return;
    }

    char buffer[8192];
    int bytesRead = 0;
    while ((bytesRead = fread(buffer, 1, sizeof(buffer), source)) > 0) {
        gzwrite(dest, buffer, bytesRead);
    }

    fclose(source);
    gzclose(dest);

    // Remove the original uncompressed file
    if (std::remove(outputCsvPath.c_str()) != 0) {
        std::cerr << "Failed to remove original file: " << outputCsvPath << '\n';
    }

    std::cout << "Expected steps to absorption saved and compressed to '" << compressedFilePath << "'\n";
}

std::string adjMatrixToBinaryString(const AdjacencyMatrix& adjMatrix) {
    std::string binaryString;
    binaryString.reserve(adjMatrix.size() * adjMatrix[0].size());

    for (const auto& row : adjMatrix) {
        for (bool entry : row) {
            binaryString += entry ? '1' : '0';
        }
    }
    return binaryString;
}

std::vector<ParamCombination> makeCombinations(std::vector<AdjacencyMatrix>& adjacencyMatrices, std::vector<Strategy>& strategies, std::vector<double>& alphas, int replications) {
    std::vector<ParamCombination> combinations;
    for (const auto& adjMatrix : adjacencyMatrices) {
        std::string adjMatrixBinary = adjMatrixToBinaryString(adjMatrix);
        for (const auto& strategy : strategies) {
            for (const auto& alpha : alphas) {
                for (int repl = 0; repl < replications; ++repl) {
                    combinations.push_back({adjMatrix, adjMatrixBinary, strategy, alpha, repl});
                }
            }
        }
    }
    return combinations;
};#ifndef DEBUG_HPP
#define DEBUG_HPP

#include <iostream>


#define DEBUG_LEVEL 0  // Set to 0 to disable debug output, 1 to enable, 2 to also print the full matrices
std::ostream& setPrecision(std::ostream& os, int precision);

#define DEBUG_PRINT(level, x) \
    if (DEBUG_LEVEL >= level) { \
        std::ios_base::fmtflags old_flags = std::cout.flags(); \
        std::streamsize old_prec = std::cout.precision(); \
        std::cout << x << '\n'; \
        std::cout.flags(old_flags); \
        std::cout.precision(old_prec); \
    }


#endif //DEBUG_HPP
#ifndef EXPECTEDSTEPS_HPP
#define EXPECTEDSTEPS_HPP

#include "Types.hpp"

#include <random>
#include <vector>
#include <sstream>

// Function to precompute all reachable states and their learnable traits
std::vector<std::pair<Repertoire, std::vector<Trait>>> precomputeStateTransitions(const AdjacencyMatrix& adjMatrix);

// Function to adjust weights and build the transition matrix
void adjustWeightsAndBuildMatrix(
    std::vector<std::vector<double>>& transitionMatrix,
    const std::vector<std::pair<Repertoire, std::vector<Trait>>>& stateTransitions,
    const std::vector<double>& traitFrequencies,
    const PayoffVector& payoffs,
    Strategy strategy,
    const std::vector<Repertoire>& allStates
);

std::vector<std::vector<double>> computeIMinusQ(
    const std::vector<std::vector<double>>& reorderedTransitionMatrix,
    int numTransientStates
);

bool isAbsorbingState(const Repertoire& repertoire);

// Main function to compute expected steps and expected payoff per step
bool computeExpectedSteps(
    const AdjacencyMatrix& adjacencyMatrix,
    Strategy strategy,
    double alpha,
    std::mt19937& gen,
    double& expectedSteps,                             // Output parameter for expected steps
    double& expectedPayoffPerStep,                     // Output parameter for expected payoff per step
    std::vector<std::vector<double>>& transitionMatrix // Output parameter for the transition matrix
);

#endif // EXPECTEDSTEPS_HPP#ifndef GRAPH_HPP 
#define GRAPH_HPP

#include "Types.hpp" 

std::vector<int> computeDistances(const AdjacencyMatrix& adjMatrix, Trait root);

std::vector<Trait> parentTraits(const AdjacencyMatrix& adjMatrix, Trait trait);

#endif // GRAPH_HPP#ifndef LEARNING_HPP
#define LEARNING_HPP

#include "Types.hpp"
#include <vector>
#include <string>

std::vector<bool> learnability(const Repertoire& repertoire, const AdjacencyMatrix& adjMatrix);

double computeDelta(const Repertoire& r, const Repertoire& s); // count the number of traits that are present in target state s but not in current state r

double phi(double delta); // Vygotskian learning function, maximum when delta = 1, falls of by a factor of 2 for each additional trait

std::vector<double> vygotskianBaseWeights(const Repertoire& repertoire, const std::vector<double>& traitFrequencies, const std::vector<Repertoire>& allStates);

std::vector<double> baseWeights(Strategy strategy, const Repertoire& repertoire, const PayoffVector& payoffs, const std::vector<double>& traitFrequencies, const std::vector<Repertoire>& allStates);

std::vector<double> normalizedWeights(Strategy strategy, const Repertoire& repertoire, const PayoffVector& payoffs, const std::vector<double>& traitFrequencies, const std::vector<Repertoire>& allStates);

Repertoire learnTrait(const Repertoire& repertoire, Trait trait);

std::vector<std::pair<Repertoire, double>> transitionFromState(
    Strategy strategy,
    const Repertoire& repertoire,
    const AdjacencyMatrix& adjMatrix,
    const PayoffVector& payoffs,
    const std::vector<double>& traitFrequencies,
    const std::vector<Repertoire>& allStates
);

double stayProbability(Strategy strategy, const Repertoire& repertoire, const AdjacencyMatrix& adjMatrix, const PayoffVector& payoffs, const std::vector<double>& traitFrequencies);

struct RepertoireHash {
    std::size_t operator()(const Repertoire& repertoire) const {
        return std::hash<std::string>{}(std::string(repertoire.begin(), repertoire.end()));
    }
};

std::vector<Repertoire> generateReachableRepertoires(const AdjacencyMatrix& adjMatrix);




#endif // LEARNING_HPP#ifndef LINEAR_ALGEBRA_HPP
#define LINEAR_ALGEBRA_HPP

#include <vector>

std::vector<double> solveLinearSystem(const std::vector<std::vector<double>>& A, const std::vector<double>& b);

#endif // LINEAR_ALGEBRA_HPP#ifndef PAYOFFS_HPP
#define PAYOFFS_HPP

#include "Types.hpp"
#include <vector>
#include <random>

PayoffVector generatePayoffs(const std::vector<int>& distances, double alpha, std::mt19937& gen);

#endif // PAYOFFS_HPP#ifndef TYPES_HPP 
#define TYPES_HPP

#include <vector>
#include <string>

using Trait = size_t;
using Repertoire = std::vector<bool>;
using PayoffVector = std::vector<double>;
using AdjacencyMatrix = std::vector<std::vector<bool>>;

enum Strategy {
    RandomLearning,
    PayoffBasedLearning,
    VygotskianLearning
};

struct ParamCombination {
    AdjacencyMatrix adjMatrix;
    std::string adjMatrixBinary;
    Strategy strategy;
    double alpha;
    int repl;
};

struct Result {
    int n;
    std::string adjMatrixBinary;
    double alpha;
    Strategy strategy;
    int repl;
    double expectedSteps;
    double expectedPayoffPerStep;
};

#endif // TYPES_HPP

#ifndef UTILS_HPP
#define UTILS_HPP

#include <vector>
#include <string> 
#include "Types.hpp"

void writeMatrixToCSV(const std::string& filename, const std::vector<std::vector<double>>& matrix);

std::string strategyToString(Strategy strategy);

std::string formatResults(int n, const std::string& adjMatrixBinary, double alpha, Strategy strategy, int repl, double expectedSteps, double expectedPayoffPerStep);

std::vector<AdjacencyMatrix> readAdjacencyMatrices(int n);

AdjacencyMatrix binaryStringToAdjacencyMatrix(int n, const std::string& str);

bool charToBool(char c);

void printMatrix(const std::vector<std::vector<double>>& matrix);

int parseArgs(int argc, char* argv[], bool& saveTransitionMatrices);

void writeAndCompressCSV(const std::string& outputDir, int n, const std::vector<std::string>& csvData);

std::string adjMatrixToBinaryString(const AdjacencyMatrix& adjMatrix);

std::vector<ParamCombination> makeCombinations(std::vector<AdjacencyMatrix>& adjacencyMatrices, std::vector<Strategy>& strategies, std::vector<double>& alphas, int replications);

#endif // UTILS_HPP